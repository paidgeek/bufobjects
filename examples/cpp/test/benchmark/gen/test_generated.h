// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_H_

#include "flatbuffers/flatbuffers.h"

struct FlatTestSub;

struct FlatTest;

struct FlatTestSub FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const { return GetField<float>(VT_X, 0.0f); }
  double y() const {  return GetField<double>(VT_Y, 0.0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<double>(verifier, VT_Y) &&
           verifier.EndTable();
  }
};

struct FlatTestSubBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) { fbb_.AddElement<float>(FlatTestSub::VT_X, x, 0.0f); }
  void add_y(double y) { fbb_.AddElement<double>(FlatTestSub::VT_Y, y, 0.0); }
  FlatTestSubBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FlatTestSubBuilder &operator=(const FlatTestSubBuilder &);
  flatbuffers::Offset<FlatTestSub> Finish() {
    auto o = flatbuffers::Offset<FlatTestSub>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FlatTestSub> CreateFlatTestSub(flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    double y = 0.0) {
  FlatTestSubBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct FlatTest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STRVALUE = 4,
    VT_INTARRAY = 6,
    VT_SUB = 8
  };
  const flatbuffers::String *strValue() const { return GetPointer<const flatbuffers::String *>(VT_STRVALUE); }
  const flatbuffers::Vector<int32_t> *intArray() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INTARRAY); }
  const FlatTestSub *sub() const { return GetPointer<const FlatTestSub *>(VT_SUB); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_STRVALUE) &&
           verifier.Verify(strValue()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_INTARRAY) &&
           verifier.Verify(intArray()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SUB) &&
           verifier.VerifyTable(sub()) &&
           verifier.EndTable();
  }
};

struct FlatTestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_strValue(flatbuffers::Offset<flatbuffers::String> strValue) { fbb_.AddOffset(FlatTest::VT_STRVALUE, strValue); }
  void add_intArray(flatbuffers::Offset<flatbuffers::Vector<int32_t>> intArray) { fbb_.AddOffset(FlatTest::VT_INTARRAY, intArray); }
  void add_sub(flatbuffers::Offset<FlatTestSub> sub) { fbb_.AddOffset(FlatTest::VT_SUB, sub); }
  FlatTestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FlatTestBuilder &operator=(const FlatTestBuilder &);
  flatbuffers::Offset<FlatTest> Finish() {
    auto o = flatbuffers::Offset<FlatTest>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FlatTest> CreateFlatTest(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> strValue = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> intArray = 0,
    flatbuffers::Offset<FlatTestSub> sub = 0) {
  FlatTestBuilder builder_(_fbb);
  builder_.add_sub(sub);
  builder_.add_intArray(intArray);
  builder_.add_strValue(strValue);
  return builder_.Finish();
}

inline flatbuffers::Offset<FlatTest> CreateFlatTestDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *strValue = nullptr,
    const std::vector<int32_t> *intArray = nullptr,
    flatbuffers::Offset<FlatTestSub> sub = 0) {
  return CreateFlatTest(_fbb, strValue ? _fbb.CreateString(strValue) : 0, intArray ? _fbb.CreateVector<int32_t>(*intArray) : 0, sub);
}

inline const FlatTest *GetFlatTest(const void *buf) { return flatbuffers::GetRoot<FlatTest>(buf); }

inline bool VerifyFlatTestBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<FlatTest>(nullptr); }

inline void FinishFlatTestBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<FlatTest> root) { fbb.Finish(root); }

#endif  // FLATBUFFERS_GENERATED_TEST_H_
