{% import "/cpp/types.twig" as tt %}
{%- import "/cpp/macros.twig" as macros -%}
// Generated with https://github.com/paidgeek/bufobjects

#include "buffer_object.h"
{% for namespace, definitions in schema -%}
#include "{{ lower(replace(namespace, {".": "_"})) }}.h"
{% endfor %}

namespace bufobjects {
  void WriteIdentifiedTo(BufferObjectBuilder& _bob, BufferObject::Ptr obj) {
    _bob.Write{{ builderTypeNames[bufferObjectIdType] }}(obj->BufferObjectId());
    obj->WriteTo(_bob);
  }

  BufferObject::Ptr ReadIdentifiedFrom(BufferObjectBuilder& _bob) {
    {{ types[bufferObjectIdType] }} id = _bob.Read{{ builderTypeNames[bufferObjectIdType] }}();
    BufferObject::Ptr obj;

    switch(id) {
{% for namespace, definitions in schema -%}
  {%- for definition in definitions -%}
    {% if(utils.getClassName(definition) == "ClassDefinition") -%}
      {%- set typeName = utils.getTypeNameForDefinition(definition) -%}
      case {{ utils.getBufferObjectIdName(definition) }}:
      {% if (utils.rawPointers) -%}
        obj = new {{ typeName }}();
      {%- else -%}
        obj = std::make_shared< {{ typeName }} >();
      {%- endif %}
      break;
    {% endif -%}
  {%- endfor -%}
{%- endfor -%}
    }
    if(obj) {
      obj->ReadFrom(_bob);
    }
    return obj;
  }
}
