{% import "/cpp/types.twig" as tt %}
{%- import "/cpp/macros.twig" as macros -%}
// Generated with https://github.com/paidgeek/bufobjects

#include "buffer_object.h"
{% for namespace, definitions in schema -%}
  {%- for definition in definitions -%}
    {%- if(utils.getClassName(definition) == "ClassDefinition") -%}
      {%- set path = "" -%}
      {%- for p in definition.name.path -%}
        {%- if (loop.revindex0 != 0) -%}
          {%- if (loop.index0 == 0) -%}
            {%- set path = concat(path, lower(p)) -%}
          {%- else -%}
            {%- set path = concat(path, "/", lower(p)) -%}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
#include "{{ path }}/{{ utils.toSnakeCase(definition.name.simpleName) }}.h"
    {% endif -%}
  {%- endfor -%}
{%- endfor %}

namespace bufobjects {
  void WriteIdentifiedTo(BufferObjectBuilder& _bob, BufferObject::Ptr obj) {
    _bob.Write{{ builderTypeNames[bufferObjectIdType] }}(obj->BufferObjectId());
    obj->WriteTo(_bob);
  }

  BufferObject::Ptr ReadIdentifiedFrom(BufferObjectBuilder& _bob) {
    {{ types[bufferObjectIdType] }} id = _bob.Read{{ builderTypeNames[bufferObjectIdType] }}();
    BufferObject::Ptr obj;

    switch(id) {
{% for namespace, definitions in schema -%}
  {%- for definition in definitions -%}
    {% if(utils.getClassName(definition) == "ClassDefinition") -%}
      {%- set typeName = trim(macros.getTypeNameForDefinition(definition)) -%}
      case {{ trim(macros.getBufferObjectIdName(definition)) }}:
      {% if (utils.rawPointers) -%}
        obj = new {{ typeName }}();
      {%- else -%}
        obj = std::make_shared< {{ typeName }} >();
      {%- endif %}
      break;
    {% endif -%}
  {%- endfor -%}
{%- endfor -%}
    }
    if(obj) {
      obj->ReadFrom(_bob);
    }
    return obj;
  }
}
