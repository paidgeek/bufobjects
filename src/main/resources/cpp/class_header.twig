{%- set name = definition.name.simpleName -%}

{% set fields = definition.fields %}
{% for p in definition.parentPath -%}
  {% set fields = merge(fields, p.fields) %}
{%- endfor -%}

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
      namespace {{ lower(p) }} {
  {% endif %}
{% endfor %}

class {{ name }}
{% if (definition.parent is not null) -%}
  : public {{ trim(macros.getBaseNoPointer(utils, definition.parentDefinition)) }}
{%- else -%}
  : public bufobjects::BufferObject
{%- endif -%}
{

protected:
{% for field in definition.fields %}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}
  {% if (utils.getClassName(field.type.definition) == "ClassDefinition") %}
  {{ typeName }} {{ utils.toSnakeCase(field.name) }}_ = nullptr;
  {% else %}
  {{ typeName }} {{ utils.toSnakeCase(field.name) }}_;
  {% endif %}
{% endfor %}

public:
{% if (utils.rawPointers) %}
  typedef {{ trim(macros.getBaseNoPointer(utils, definition)) }}* Ptr;
{% else %}
  typedef std::shared_ptr<{{ trim(macros.getBaseNoPointer(utils, definition)) }}> Ptr;
{% endif %}
{% for field in definition.fields %}
  {%- if (utils.getClassName(field.type) == "ArrayType") %}
    static const uint32_t k{{ field.name }}Length = {{ field.type.length }};
  {% endif -%}
{% endfor %}
{% if (utils.hasAttribute(definition, "MakeBuilder") == true) %}
  class Builder;
{% endif %}

{{ name }}();
{{ name }}(
{%- for field in fields -%}
  {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%});
{% if (utils.rawPointers) %}
  ~{{ name }}();
{% endif %}
void Init(
{%- for field in fields -%}
  {%- if (utils.getClassName(field.type.definition) == "ClassDefinition") -%}
    {{ trim(macros.getTypeName(utils, field.type)) }}& {{ utils.toSnakeCase(field.name) }}
  {%- else -%}
    {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- endif -%}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%});
static Ptr New(
{%- for field in fields -%}
  {%- if (utils.getClassName(field.type.definition) == "ClassDefinition") -%}
    {{ trim(macros.getTypeName(utils, field.type)) }}& {{ utils.toSnakeCase(field.name) }}
  {%- else -%}
    {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- endif -%}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%});
{{ name }}(const {{ name }}& from);
{{ name }}& operator=(const {{ name }}& from);
explicit operator bufobjects::BufferObject::Ptr() {
  return static_cast< bufobjects::BufferObject::Ptr >(this);
}
{{ types[bufferObjectIdType] }} BufferObjectId() const;
void Reset();
void CopyTo(bufobjects::BufferObject& obj) const;
uint32_t Size() const;
void WriteTo(bufobjects::BufferBuilder& bb) const;
void ReadFrom(bufobjects::BufferBuilder& bb);
{% if (utils.hasAttribute(definition, "MakeJson") == true) %}
  void WriteJsonTo(std::ostream& out_stream) const;
{% endif %}
{%- include "/cpp/class/getset.twig" -%}
static void WriteDirectTo(bufobjects::BufferBuilder& bb,
{%- for field in fields -%}
  {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%});
static void WriteDirectIdentifiedTo(bufobjects::BufferBuilder& bb,
{%- for field in fields -%}
  {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%});
};

{% if (utils.hasAttribute(definition, "MakeBuilder") == true) %}
  {% include "/cpp/class/builder_header.twig" %}
{% endif %}

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    }
  {% endif %}
{% endfor %}
