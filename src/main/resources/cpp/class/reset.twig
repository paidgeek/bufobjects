{% for field in definition.fields -%}
  {%- set snakeCase = utils.toSnakeCase(field.name) -%}
  {%- set className = utils.getClassName(field.type) -%}

  {% if (className == "VectorType") %}
    {% if (utils.getClassName(field.type.type.definition) != "StructDefinition" and field.type.type.token.toString() == "IDENTIFIER") %}
      for(auto e : {{ snakeCase }}_) {
        delete(e);
      }
    {% endif %}
    {{ snakeCase }}_.clear();
  {% elseif (className == "ArrayType") %}
    {% if (utils.getClassName(field.type.type.definition) != "StructDefinition" and field.type.type.token.toString() == "IDENTIFIER") %}
      for(auto e : {{ snakeCase }}_) {
        delete(e);
      }
    {% endif %}
    {{ snakeCase }}_ = std::array<{{ trim(macros.getBaseType(utils, field.type.type)) }}, {{ field.type.length }}>{};
  {% elseif (className == "MapType") %}
    {% if (utils.getClassName(field.type.valueType.definition) != "StructDefinition" and field.type.valueType.token.toString() == "IDENTIFIER") %}
      for (const auto& kv : {{ snakeCase }}_) {
        delete(kv.second);
      }
    {% endif %}
    {{ snakeCase }}_.clear();
  {%- elseif (utils.getClassName(field.type.definition) == "EnumDefinition") -%}
    {{ snakeCase }}_ = static_cast< {{ trim(macros.getBaseType(utils, field.type)) }} >(0);
  {%- elseif (field.type.token.toString() == "s") -%}
    {{ snakeCase }}_.clear();
  {%- elseif (field.type.token.toString() == "b") -%}
    {{ snakeCase }}_ = false;
  {%- elseif (utils.getClassName(field.type.definition) == "StructDefinition") -%}
    {{ snakeCase }}_.Reset();
  {%- elseif (field.type.token.toString() == "IDENTIFIER") -%}
    delete({{ snakeCase }}_);
    {{ snakeCase }}_ = nullptr;
  {%- elseif (field.type.token.toString() == "f32") -%}
    {{ snakeCase }}_ = 0.0f;
  {%- elseif (field.type.token.toString() == "f64") -%}
    {{ snakeCase }}_ = 0.0;
  {%- else -%}
    {{ snakeCase }}_ = 0;
  {%- endif -%}
{%- endfor %}
