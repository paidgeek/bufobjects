{{ name }}::{{ utils.toClassName("Builder") }}::{{ utils.toClassName("Builder") }}() { }
{% for field in fields -%}
  {%- set parameterName = utils.toParameter(field.name) -%}
  {%- set fieldName = utils.toClassField(field.name) -%}
  {%- set className = utils.getClassName(field.type) -%}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}
  {%- set setterName = utils.toSetter(field.name) -%}

  {% if (utils.getClassName(field.type.definition) == "StructDefinition" or field.type.token.toString() != "IDENTIFIER") %}
    {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ setterName }}(const {{ typeName }}& {{ parameterName }}) {
      {{ fieldName }} = {{ parameterName }};
      return *this;
    }
  {% else %}
    {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ setterName }}({{ typeName }} {{ parameterName }}) {
      {{ fieldName }} = {{ parameterName }};
      return *this;
    }
  {% endif %}

  {% if (className == "VectorType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ setterName }}(int {{ utils.toParameter("index") }}, const {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }}& {{ utils.toParameter("value") }}) {
      {{ fieldName }}[{{ utils.toParameter("index") }}] = {{ utils.toParameter("value") }};
      return *this;
      }
      {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ utils.toMethod(concat("Add", field.name)) }}(const {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }}& {{ utils.toParameter("value") }}) {
      {{ fieldName }}.push_back({{ utils.toParameter("value") }});
      return *this;
      }
      {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ utils.toMethod(concat("Add", field.name)) }}(const {{ typeName }}& {{ utils.toParameter("values") }}) {
      {{ fieldName }}.insert(std::end({{ fieldName }}), std::begin({{ utils.toParameter("values") }}), std::end({{ utils.toParameter("values") }}));
      return *this;
      }
    {% else %}
      {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ setterName }}(int {{ utils.toParameter("index") }}, {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }} {{ utils.toParameter("value") }}) {
      {{ fieldName }}[{{ utils.toParameter("index") }}] = {{ utils.toParameter("value") }};
      return *this;
      }
      {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ utils.toMethod(concat("Add", field.name)) }}({{ trim(macros.getBaseNoPointer(utils, field.type.type)) }} {{ utils.toParameter("value") }}) {
      {{ fieldName }}.push_back({{ utils.toParameter("value") }});
      return *this;
      }
      {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ utils.toMethod(concat("Add", field.name)) }}({{ typeName }} {{ utils.toParameter("values") }}) {
      {{ fieldName }}.insert(std::end({{ fieldName }}), std::begin({{ utils.toParameter("values") }}), std::end({{ utils.toParameter("values") }}));
      return *this;
      }
    {% endif %}
  {% elseif (className == "ArrayType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ setterName }}(int {{ utils.toParameter("index") }}, const {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }}& {{ utils.toParameter("value") }}) {
      {{ fieldName }}[{{ utils.toParameter("index") }}] = {{ utils.toParameter("value") }};
      return *this;
      }
    {% else %}
      {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ setterName }}(int {{ utils.toParameter("index") }}, {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }} {{ utils.toParameter("value") }}) {
      {{ fieldName }}[{{ utils.toParameter("index") }}] = {{ utils.toParameter("value") }};
      return *this;
      }
    {% endif %}
  {% elseif (className == "MapType") %}
    {% set keyType = "" %}
    {% set valueType = "" %}

    {%- if (utils.getClassName(field.type.valueType.definition) == "StructDefinition" or field.type.valueType.token.toString() != "IDENTIFIER") -%}
      {%- if (utils.getClassName(field.type.keyType.definition) == "StructDefinition" or field.type.keyType.token.toString() != "IDENTIFIER") -%}
        {%- set keyType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.valueType)), "&") -%}
        {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ setterName }}({{ keyType }} {{ utils.toParameter("key") }}, {{ valueType }} {{ utils.toParameter("value") }}) {
        {{ fieldName }}[{{ utils.toParameter("key") }}] = {{ utils.toParameter("value") }};
        return *this;
        }
      {%- else -%}
        {%- set keyType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.valueType)), "&") -%}
        {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ setterName }}({{ keyType }} {{ utils.toParameter("key") }}, {{ valueType }} {{ utils.toParameter("value") }}) {
        {{ fieldName }}[{{ utils.toParameter("key") }}] = {{ utils.toParameter("value") }};
        return *this;
        }
      {%- endif -%}
    {%- else -%}
      {%- if (utils.getClassName(field.type.keyType.definition) == "StructDefinition" or field.type.keyType.token.toString() != "IDENTIFIER") -%}
        {%- set keyType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("", trim(macros.getBaseNoPointer(utils, field.type.valueType)), "") -%}
        {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ setterName }}({{ keyType }} {{ utils.toParameter("key") }}, {{ valueType }} {{ utils.toParameter("value") }}) {
        {{ fieldName }}[{{ utils.toParameter("key") }}] = {{ utils.toParameter("value") }};
        return *this;
        }
      {%- else -%}
        {%- set keyType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("", trim(macros.getBaseNoPointer(utils, field.type.valueType)), "") -%}
        {{ name }}::{{ utils.toClassName("Builder") }}& {{ name }}::{{ utils.toClassName("Builder") }}::{{ setterName }}({{ keyType }} {{ utils.toParameter("key") }}, {{ valueType }} {{ utils.toParameter("value") }}) {
        {{ fieldName }}[{{ utils.toParameter("key") }}] = {{ utils.toParameter("value") }};
        return *this;
        }
      {%- endif -%}
    {%- endif -%}

  {% endif %}

{%- endfor %}
{{ name }}* {{ name }}::{{ utils.toClassName("Builder") }}::{{ utils.toMethod("Build") }}() {
return new {{ name }}{
{% for field in fields -%}
    std::move({{ utils.toClassField(field.name) }})
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{% endfor %}
};
}