{%- import "/cpp/macros.twig" as macros -%}

{% for field in definition.fields -%}
  {%- set snakeCase = utils.toSnakeCase(field.name) -%}
  {%- set className = utils.getClassName(field.type) -%}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}

  {% if (utils.getClassName(field.type.definition) == "StructDefinition" or field.type.token.toString() != "IDENTIFIER") %}
    const {{ typeName }}& Get{{ field.name }}() const;
    void Set{{ field.name }}(const {{ typeName }}& {{ snakeCase }});
  {% else %}
    {{ typeName }} Get{{ field.name }}();
    void Set{{ field.name }}({{ typeName }} {{ snakeCase }});
  {% endif %}

  {% if (className == "VectorType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      const {{ trim(macros.getBaseType(utils, field.type.type))}}& Get{{ field.name }}At(int index) const;
      void Set{{ field.name }}At(int index, const {{ trim(macros.getBaseType(utils, field.type.type)) }}& value);
    {% else %}
      {{ trim(macros.getBaseType(utils, field.type.type))}} Get{{ field.name }}At(int index) const;
      void Set{{ field.name }}At(int index, {{ trim(macros.getBaseType(utils, field.type.type)) }} value);
    {% endif %}
  {% elseif (className == "ArrayType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      const {{ trim(macros.getBaseType(utils, field.type.type)) }}& Get{{ field.name }}At(int index) const;
      void Set{{ field.name }}At(int index, const {{ trim(macros.getBaseType(utils, field.type.type)) }}& value);
    {% else %}
      {{ trim(macros.getBaseType(utils, field.type.type)) }} Get{{ field.name }}At(int index);
      void Set{{ field.name }}At(int index, const {{ trim(macros.getBaseType(utils, field.type.type)) }} value);
    {% endif %}
  {% endif %}

{%- endfor %}
