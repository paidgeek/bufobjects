{% set fields = definition.fields %}
{% for p in definition.parentPath -%}
  {% set fields = merge(fields, p.fields) %}
{%- endfor -%}
{% for field in fields -%}
  {%- set fieldName = utils.toClassField(field.name) -%}
  {%- set className = utils.getClassName(field.type) -%}
  {%- if (className == "ArrayType") -%}
    _dst.{{ fieldName }} = std::array< {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }}, {{ field.type.length }}>( {{ fieldName }} );
  {%- elseif (className == "VectorType") -%}
    _dst.{{ fieldName }} = std::vector< {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }} >({{ fieldName }});
  {%- elseif (className == "MapType") -%}
    _dst.{{ fieldName }} = std::map< {{ trim(macros.getBaseNoPointer(utils, field.type.keyType)) }}, {{ trim(macros.getBaseNoPointer(utils, field.type.valueType)) }} >({{ fieldName }});
  {%- elseif (utils.getClassName(field.type.definition) == "EnumDefinition") -%}
    _dst.{{ fieldName }} = {{ fieldName }};
  {%- elseif (field.type.token.toString() == "IDENTIFIER") -%}
    {% if (utils.getClassName(field.type.definition) == "StructDefinition") %}
      _dst.{{ fieldName }} = {{ fieldName }};
    {% else %}
    if({{ fieldName }} != nullptr) {
      {{ fieldName }}->{{ utils.toMethod("CopyTo") }}(*_dst.{{ fieldName }});
    }
    {% endif %}
  {%- else -%}
    _dst.{{ fieldName }} = {{ fieldName }};
  {%- endif -%}
{%- endfor %}
