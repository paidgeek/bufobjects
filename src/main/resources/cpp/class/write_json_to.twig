_out_stream << '{';

{% if (definition.parent is not null) %}
  _out_stream << "\"_id\":";

{%- if (bufferObjectIdType == "i16" or bufferObjectIdType == "i32" or bufferObjectIdType == "u16" or bufferObjectIdType == "u32") -%}
  _out_stream << this->BufferObjectId();
{%- elseif (bufferObjectIdType == "i64" or bufferObjectIdType == "u64") -%}
  _out_stream << "\"" << this->BufferObjectId() << "\"";
{%- elseif (bufferObjectIdType == "i8") -%}
  _out_stream << static_cast< int16_t >(this->BufferObjectId());
{%- elseif (bufferObjectIdType == "u8") -%}
  _out_stream << static_cast< uint16_t >(this->BufferObjectId());
{%- endif -%}
  {% if (length(fields) != 0) %}
    _out_stream << ',';
  {% endif %}
{% endif %}

uint32_t _i = 0;
{% for field in fields %}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}
  {%- set name = concat(utils.toSnakeCase(field.name), "_") -%}
  {%- set fieldName = utils.toSnakeCase(field.name) -%}
  {%- set className = utils.getClassName(field.type) -%}

  _out_stream << "\"" << "{{ fieldName }}" << "\":";
  {%- if (className == "ArrayType" or className == "VectorType") -%}
    _out_stream << '[';
    _i = 0;
    for(const auto& _e : {{ name }}) {
      {{ trim(macros.writeJsonValue(utils, field.type.type, "_e")) }}
      if(++_i < {{ name }}.size()) {
        _out_stream << ',';
      }
    }
    _out_stream << ']';
  {%- elseif (className == "MapType") -%}
    _out_stream << '{';
    _i = 0;
    for(const auto& _kv : {{ name }}) {
      _out_stream << "\"" << _kv.first << "\":";
      {{ trim(macros.writeJsonValue(utils, field.type.valueType, "_kv.second")) }}
      if(++_i < {{ name }}.size()) {
        _out_stream << ',';
      }
    }
    _out_stream << '}';
  {% else %}
    {{ trim(macros.writeJsonValue(utils, field.type, name)) }}
  {% endif %}

  {% if (loop.revindex0 != 0) %}
    _out_stream << ',';
  {% endif %}

{% endfor %}
_out_stream << '}';
