class {{ name }}::Builder {
public:
Builder();
{% for field in fields -%}
  {%- set snakeCase = utils.toSnakeCase(field.name) -%}
  {%- set className = utils.getClassName(field.type) -%}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}

  {% if (utils.getClassName(field.type.definition) == "StructDefinition" or field.type.token.toString() != "IDENTIFIER") %}
    Builder& Set{{ field.name }}(const {{ typeName }}& {{ snakeCase }});
  {% else %}
    Builder& Set{{ field.name }}({{ typeName }} {{ snakeCase }});
  {% endif %}

  {% if (className == "VectorType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      Builder& Set{{ field.name }}(int index, const {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }}& value);
      Builder& Add{{ field.name }}(const {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }}& value);
      Builder& Add{{ field.name }}(const {{ typeName }}& values);
    {% else %}
      Builder& Set{{ field.name }}(int index, {{ trim(macros.getBaseType(utils, field.type.type)) }} value);
      Builder& Add{{ field.name }}({{ trim(macros.getBaseType(utils, field.type.type)) }} value);
      Builder& Add{{ field.name }}({{ typeName }} values);
    {% endif %}
  {% elseif (className == "ArrayType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      Builder& Set{{ field.name }}(int index, const {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }}& value);
    {% else %}
      Builder& Set{{ field.name }}(int index, {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }} value);
    {% endif %}
  {% elseif (className == "MapType") %}
    {% set keyType = "" %}
    {% set valueType = "" %}

    {%- if (utils.getClassName(field.type.valueType.definition) == "StructDefinition" or field.type.valueType.token.toString() != "IDENTIFIER") -%}
      {%- if (utils.getClassName(field.type.keyType.definition) == "StructDefinition" or field.type.keyType.token.toString() != "IDENTIFIER") -%}
        {%- set keyType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.valueType)), "&") -%}
      {%- else -%}
        {%- set keyType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.valueType)), "&") -%}
      {%- endif -%}
    {%- else -%}
      {%- if (utils.getClassName(field.type.keyType.definition) == "StructDefinition" or field.type.keyType.token.toString() != "IDENTIFIER") -%}
        {%- set keyType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("", trim(macros.getBaseNoPointer(utils, field.type.valueType)), "") -%}
      {%- else -%}
        {%- set keyType = concat("const ", trim(macros.getBaseNoPointer(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("", trim(macros.getBaseNoPointer(utils, field.type.valueType)), "") -%}
      {%- endif -%}
    {%- endif -%}
    Builder& Set{{ field.name }}({{ keyType }} key, {{ valueType }} value);
  {% endif %}
{%- endfor %}
{{ name }}* Build();
private:
{% for field in fields %}
  {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toClassFieldName(field.name) }}
  {%- set definitionClassName = utils.getClassName(field.type.definition) -%}
  {%- if (definitionClassName == "EnumDefinition") -%}
    = static_cast< {{ trim(macros.getBaseType(utils, field.type)) }} >(0)
  {%- elseif (field.type.token.toString() == "b") -%}
    = false
  {%- elseif (definitionClassName == "ClassDefinition" or definitionClassName == "InterfaceDefinition") -%}
    = nullptr
  {%- elseif (field.type.token.toString() == "f32") -%}
    = 0.0f
  {%- elseif (field.type.token.toString() == "f64") -%}
    = 0.0
  {%- elseif (field.type.token.isIntegerType() == true) -%}
    = 0
  {%- endif -%}
  ;
{% endfor %}
};