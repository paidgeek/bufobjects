class {{ name }}::Builder {
private:
{% for field in fields %}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}
  {{ typeName }} {{ utils.toSnakeCase(field.name) }}_;
{% endfor %}
public:
  Builder();
{% for field in fields -%}
  {%- set snakeCase = utils.toSnakeCase(field.name) -%}
  {%- set className = utils.getClassName(field.type) -%}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}

  {% if (utils.getClassName(field.type.definition) == "StructDefinition" or field.type.token.toString() != "IDENTIFIER") %}
    Builder& {{ field.name }}(const {{ typeName }}& {{ snakeCase }});
  {% else %}
    Builder& {{ field.name }}({{ typeName }} {{ snakeCase }});
  {% endif %}

  {% if (className == "VectorType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      Builder& {{ field.name }}(int index, const {{ trim(macros.getBaseType(utils, field.type.type)) }}& value);
      Builder& Add{{ field.name }}(const {{ trim(macros.getBaseType(utils, field.type.type)) }}& value);
      Builder& Add{{ field.name }}(const {{ typeName }}& values);
    {% else %}
      Builder& {{ field.name }}(int index, {{ trim(macros.getBaseType(utils, field.type.type)) }} value);
      Builder& Add{{ field.name }}({{ trim(macros.getBaseType(utils, field.type.type)) }} value);
      Builder& Add{{ field.name }}({{ typeName }} values);
    {% endif %}
  {% elseif (className == "ArrayType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      Builder& {{ field.name }}(int index, const {{ trim(macros.getBaseType(utils, field.type.type)) }}& value);
    {% else %}
      Builder& {{ field.name }}(int index, {{ trim(macros.getBaseType(utils, field.type.type)) }} value);
    {% endif %}
  {% endif %}
{%- endfor %}
{{ name }}::Ptr Build();
};