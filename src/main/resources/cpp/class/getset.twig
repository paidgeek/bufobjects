{%- import "/cpp/macros.twig" as macros -%}

{% for field in definition.fields -%}
  {%- set snakeCase = utils.toSnakeCase(field.name) -%}
  {%- set className = utils.getClassName(field.type) -%}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}

  {% if (utils.getClassName(field.type.definition) == "StructDefinition" or field.type.token.toString() != "IDENTIFIER") %}
    inline const {{ typeName }}& Get{{ field.name }}() const { return {{ snakeCase }}_; }
    inline void Set{{ field.name }}(const {{ typeName }}& {{ snakeCase }}) { {{ snakeCase }}_ = {{ snakeCase }}; }
  {% else %}
    inline {{ typeName }} Get{{ field.name }}() { return {{ snakeCase }}_; }
    inline void Set{{ field.name }}({{ typeName }} {{ snakeCase }}) { {{ snakeCase }}_ = {{ snakeCase }}; }
  {% endif %}

  {% if (className == "VectorType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      inline const {{ trim(macros.getBaseType(utils, field.type.type))}}& Get{{ field.name }}(int index) const { return {{ snakeCase }}_[index]; }
      inline void Set{{ field.name }}(int index, const {{ trim(macros.getBaseType(utils, field.type.type)) }}& value) { {{ snakeCase }}_[index] = value; }
    {% else %}
      inline {{ trim(macros.getBaseType(utils, field.type.type))}} Get{{ field.name }}(int index) { return {{ snakeCase }}_[index]; }
      inline void Set{{ field.name }}(int index, {{ trim(macros.getBaseType(utils, field.type.type)) }} value) { {{ snakeCase }}_[index] = value; }
    {% endif %}
  {% elseif (className == "ArrayType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      inline const {{ trim(macros.getBaseType(utils, field.type.type)) }}& Get{{ field.name }}(int index) const { return {{ snakeCase }}_[index]; }
      inline void Set{{ field.name }}(int index, const {{ trim(macros.getBaseType(utils, field.type.type)) }}& value) { {{ snakeCase }}_[index] = value; }
    {% else %}
      inline {{ trim(macros.getBaseType(utils, field.type.type)) }} Get{{ field.name }}(int index) { return {{ snakeCase }}_[index]; }
      inline void Set{{ field.name }}(int index, {{ trim(macros.getBaseType(utils, field.type.type)) }} value) { {{ snakeCase }}_[index] = value; }
    {% endif %}
  {% elseif (className == "MapType") %}
    {% set keyType = "" %}
    {% set valueType = "" %}
    {%- if (utils.getClassName(field.type.valueType.definition) == "StructDefinition" or field.type.valueType.token.toString() != "IDENTIFIER") -%}
      {%- if (utils.getClassName(field.type.keyType.definition) == "StructDefinition" or field.type.keyType.token.toString() != "IDENTIFIER") -%}
        {%- set keyType = concat("const ", trim(macros.getBaseType(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("const ", trim(macros.getBaseType(utils, field.type.valueType)), "&") -%}
        inline {{ valueType }} Get{{ field.name }}({{ keyType }} key) { return {{ snakeCase }}_[key]; }
        inline void Set{{ field.name }}({{ keyType }} key, {{ valueType }} value) { {{ snakeCase }}_[key] = value; }
      {%- else -%}
        {%- set keyType = concat("const ", trim(macros.getBaseType(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("const ", trim(macros.getBaseType(utils, field.type.valueType)), "&") -%}
        inline {{ valueType }} Get{{ field.name }}({{ keyType }} key) { return {{ snakeCase }}_[key]; }
        inline void Set{{ field.name }}({{ keyType }} key, {{ valueType }} value) { {{ snakeCase }}_[key] = value; }
      {%- endif -%}
    {%- else -%}
      {%- if (utils.getClassName(field.type.keyType.definition) == "StructDefinition" or field.type.keyType.token.toString() != "IDENTIFIER") -%}
        {%- set keyType = concat("const ", trim(macros.getBaseType(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("", trim(macros.getBaseType(utils, field.type.valueType)), "") -%}
        inline {{ valueType }} Get{{ field.name }}({{ keyType }} key) { return {{ snakeCase }}_[key]; }
        inline void Set{{ field.name }}({{ keyType }} key, {{ valueType }} value) { {{ snakeCase }}_[key] = value; }
      {%- else -%}
        {%- set keyType = concat("const ", trim(macros.getBaseType(utils, field.type.keyType)), "&") -%}
        {%- set valueType = concat("", trim(macros.getBaseType(utils, field.type.valueType)), "") -%}
        inline {{ valueType }} Get{{ field.name }}({{ keyType }} key) { return {{ snakeCase }}_[key]; }
        inline void Set{{ field.name }}({{ keyType }} key, {{ valueType }} value) { {{ snakeCase }}_[key] = value; }
      {%- endif -%}
    {%- endif -%}
  {% endif %}

{%- endfor %}
