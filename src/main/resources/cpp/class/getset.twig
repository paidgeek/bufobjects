{%- import "/cpp/macros.twig" as macros -%}

{% for field in definition.fields -%}
  {%- set fieldName = utils.toClassFieldName(field.name) -%}
  {%- set className = utils.getClassName(field.type) -%}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}

  {%- set paramName = utils.toSnakeCase(field.name) -%}
  {%- set setterName = utils.toSetterName(field.name) -%}
  {%- set getterName = utils.toGetterName(field.name) -%}

  {% if (utils.getClassName(field.type.definition) == "StructDefinition" or utils.getClassName(field.type.definition) == "EnumDefinition" or field.type.token.toString() != "IDENTIFIER") %}
    inline const {{ typeName }}& {{ getterName }}() const { return {{ fieldName }}; }
    inline {{ typeName }}& {{ getterName }}() { return {{ fieldName }}; }
    inline void {{ setterName }}(const {{ typeName }}& {{ paramName }}) { {{ fieldName }} = {{ fieldName }}; }
  {% else %}
    inline {{ typeName }} {{ getterName }}() { return {{ fieldName }}; _cached_size_ = 0; }
    inline const {{ typeName }} {{ getterName }}() const { return {{ fieldName }}; }
    inline void {{ setterName }}({{ typeName }} {{ paramName }}) { {{ fieldName }} = {{ fieldName }}; _cached_size_ = 0; }
  {% endif %}

  {% if (className == "VectorType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      inline const {{ trim(macros.getBaseNoPointer(utils, field.type.type))}}& {{ getterName }}(int index) const { return {{ fieldName }}[index]; }
      inline {{ trim(macros.getBaseNoPointer(utils, field.type.type))}}& {{ getterName }}(int index) { return {{ fieldName }}[index]; }
      inline void {{ setterName }}(int index, const {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }}& value) { {{ fieldName }}[index] = value; }
    {% else %}
      inline {{ trim(macros.getBaseNoPointer(utils, field.type.type))}} {{ getterName }}(int index) { return {{ fieldName }}[index]; _cached_size_ = 0; }
      inline void {{ setterName }}(int index, {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }} value) { {{ fieldName }}[index] = value; _cached_size_ = 0; }
    {% endif %}
  {% elseif (className == "ArrayType") %}
    {% if (utils.getClassName(field.type.type.definition) == "StructDefinition" or field.type.type.token.toString() != "IDENTIFIER") %}
      inline const {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }}& {{ getterName }}(int index) const { return {{ fieldName }}[index]; }
      inline {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }}& {{ getterName }}(int index) { return {{ fieldName }}[index]; }
      inline void {{ setterName }}(int index, const {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }}& value) { {{ fieldName }}[index] = value; }
    {% else %}
      inline {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }} {{ getterName }}(int index) { return {{ fieldName }}[index]; _cached_size_ = 0; }
      inline void {{ setterName }}(int index, {{ trim(macros.getBaseNoPointer(utils, field.type.type)) }} value) { {{ fieldName }}[index] = value; _cached_size_ = 0; }
    {% endif %}
  {% elseif (className == "MapType") %}
    {%- set keyType = trim(macros.getBaseNoPointer(utils, field.type.keyType)) -%}
    {%- set valueType = trim(macros.getBaseNoPointer(utils, field.type.valueType)) -%}

    {%- if (utils.getClassName(field.type.valueType.definition) == "StructDefinition" or field.type.valueType.token.toString() != "IDENTIFIER") -%}
      {%- if (utils.getClassName(field.type.keyType.definition) == "StructDefinition" or field.type.keyType.token.toString() != "IDENTIFIER") -%}
        inline {{ valueType }}& {{ getterName }}(const {{ keyType }}& key) { return {{ fieldName }}[key]; }
        inline const {{ valueType }}& {{ getterName }}(const {{ keyType }}& key) const { return {{ fieldName }}[key]; }
        inline void {{ setterName }}(const {{ keyType }}& key, {{ valueType }}& value) { {{ fieldName }}[key] = value; }
      {%- else -%}
        inline const {{ valueType }} {{ getterName }}(const {{ keyType }}& key) const { return {{ fieldName }}[key]; }
        inline {{ valueType }} {{ getterName }}(const {{ keyType }}& key) { return {{ fieldName }}[key]; _cached_size_ = 0; }
        inline void {{ setterName }}(const {{ keyType }}& key, {{ valueType }}& value) { {{ fieldName }}[key] = value; _cached_size_ = 0; }
      {%- endif -%}
    {%- else -%}
      {%- if (utils.getClassName(field.type.keyType.definition) == "StructDefinition" or field.type.keyType.token.toString() != "IDENTIFIER") -%}
        inline {{ valueType }} {{ getterName }}(const {{ keyType }}& key) { return {{ fieldName }}[key]; }
        inline void {{ setterName }}(const {{ keyType }}& key, {{ valueType }}& value) { {{ fieldName }}[key] = value; }
      {%- else -%}
        inline {{ valueType }} {{ getterName }}(const {{ keyType }}& key) { return {{ fieldName }}[key]; _cached_size_ = 0; }
        inline void {{ setterName }}(const {{ keyType }}& key, {{ valueType }} value) { {{ fieldName }}[key] = value; _cached_size_ = 0; }
      {%- endif -%}
    {%- endif -%}

  {% endif %}

{%- endfor %}
