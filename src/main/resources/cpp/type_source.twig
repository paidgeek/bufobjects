{%- import "/cpp/macros.twig" as macros -%}
{%- import "/cpp/types.twig" as tt -%}

{%- set name = definition.name.simpleName -%}
// Generated with https://github.com/paidgeek/bufobjects

{% set incPath = "" -%}
{%- for p in definition.name.path -%}
  {%- if (loop.index0 != 0) -%}
    {%- set incPath = concat(incPath, "../") -%}
  {%- endif -%}
{%- endfor -%}
#include "{{ name }}.h"

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    namespace {{ lower(p) }} {
  {% endif %}
{% endfor %}

{% set fields = definition.fields %}
{% for p in definition.parentPath -%}
  {% set fields = merge(fields, p.fields) %}
{%- endfor -%}

{{ name }}::{{ name }}() {
  Reset();
}

{{ name }}::{{ name }}(
{%- for field in fields -%}
  {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%})
: {%- for field in fields -%}
  {{ utils.toSnakeCase(field.name) }}_({{ utils.toSnakeCase(field.name) }})
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}
{}

{{ name }}::{{ name }}(const {{ name }}& from) {
  from.CopyTo(*this);
}

inline {{ name }}& {{ name }}::operator=(const {{ name }}& from) {
  from.CopyTo(*this);
  return *this;
}

{{ types[bufferObjectIdType] }} {{ name }}::BufferObjectId() const {
  return bufobjects::BufferObject::{{ trim(macros.getBufferObjectIdName(definition)) }};
}

void {{ name }}::Reset() {
{% if (definition.parent) -%}
  super.Reset();
{%- endif -%}
{% include "/cpp/reset.twig" %}
}

void {{ name }}::CopyTo(bufobjects::BufferObject& obj) const {
{{ name }}& dst = static_cast< {{ name }}& >(obj);
{% include "/cpp/copy_to.twig" %}
}

uint32_t {{ name }}::Size() const {
{% include "/cpp/size.twig" %}
}

void {{ name }}::WriteTo(bufobjects::BufferObjectBuilder& bob) const {
uint32_t needed = Size();
if(bob.GetRemaining() < needed) {
bob.GrowBuffer(needed);
}
{% include "/cpp/write_to.twig" %}
}

void {{ name }}::ReadFrom(bufobjects::BufferObjectBuilder& bob) {
{% include "/cpp/read_from.twig" %}
}

{%- include "/cpp/getset_source.twig" -%}

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    }
  {% endif %}
{% endfor %}
