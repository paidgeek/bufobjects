{%- set name = definition.name.simpleName -%}

{% set fields = definition.fields %}
{% for p in definition.parentPath -%}
  {% set fields = merge(fields, p.fields) %}
{%- endfor -%}

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    namespace {{ lower(p) }} {
  {% endif %}
{% endfor %}

{{ name }}::{{ name }}() { }

{{ name }}::{{ name }}(
{%- for field in fields -%}
    {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%})
: {%- if (definition.parent is not null) -%}
  {{ trim(macros.getBaseNoPointer(utils, definition.parentDefinition)) }}(
  {%- for field in definition.parentDefinition.fields -%}
    {{ utils.toSnakeCase(field.name) }}
    {%- if (loop.revindex0 != 0) -%}
      ,
    {%- endif -%}
  {%- endfor -%}
  )
  {% if (length(definition.fields) != 0) %}
    ,
  {% endif %}
{%- endif %}
{%- for field in definition.fields -%}
  {{ utils.toSnakeCase(field.name) }}_({{ utils.toSnakeCase(field.name) }})
  {%- if (loop.revindex0 != 0 ) -%}
    ,
  {%- endif -%}
{%- endfor -%}
{}

{% if (utils.rawPointers) %}
{{ name }}::~{{ name }}() {
  {% include "/cpp/class/destructor.twig" %}
}
{% endif %}

void {{ name }}::Init(
{%- for field in fields -%}
    {%- if (utils.getClassName(field.type.definition) == "ClassDefinition") -%}
     {{ trim(macros.getTypeName(utils, field.type)) }}& {{ utils.toSnakeCase(field.name) }}
    {%- else -%}
     {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
    {%- endif -%}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}) {
{%- for field in fields -%}
  {{ utils.toSnakeCase(field.name) }}_ = {{ utils.toSnakeCase(field.name) }};
{%- endfor -%}
}
{{ name }}::Ptr {{ name }}::New(
{%- for field in fields -%}
  {%- if (utils.getClassName(field.type.definition) == "ClassDefinition") -%}
    {{ trim(macros.getTypeName(utils, field.type)) }}& {{ utils.toSnakeCase(field.name) }}
  {%- else -%}
    {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- endif -%}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}) {
{% if (utils.rawPointers) %}
  return new {{ trim(macros.getBaseNoPointer(utils, definition)) }}{
  {%- for field in fields -%}
    {{ utils.toSnakeCase(field.name) }}
    {%- if (loop.revindex0 != 0) -%}
      ,
    {%- endif -%}
  {%- endfor -%}};
{% else %}
  return std::make_shared< {{ trim(macros.getBaseNoPointer(utils, definition)) }} >(
  {%- for field in fields -%}
    {{ utils.toSnakeCase(field.name) }}
    {%- if (loop.revindex0 != 0) -%}
      ,
    {%- endif -%}
  {%- endfor -%});
{% endif %}
}

{{ name }}::{{ name }}(const {{ name }}& from) {
  from.CopyTo(*this);
}

{{ name }}& {{ name }}::operator=(const {{ name }}& from) {
  from.CopyTo(*this);
  return *this;
}

{{ types[bufferObjectIdType] }} {{ name }}::BufferObjectId() const {
  return bufobjects::{{ utils.getBufferObjectIdName(definition) }};
}

void {{ name }}::Reset() {
{% if (definition.parent) -%}
  {{ trim(macros.getBaseNoPointer(utils, definition.parentDefinition)) }}::Reset();
{%- endif -%}
{% include "/cpp/class/reset.twig" %}
}

void {{ name }}::CopyTo(bufobjects::BufferObject& _obj) const {
{{ name }}& _dst = static_cast< {{ name }}& >(_obj);
{% include "/cpp/class/copy_to.twig" %}
}

uint32_t {{ name }}::Size() const {
{% include "/cpp/class/size.twig" %}
}

void {{ name }}::WriteTo(bufobjects::BufferObjectBuilder& _bob) const {
uint32_t _needed = this->Size();
if(_bob.GetRemaining() < _needed) {
  _bob.GrowBuffer(_needed);
}
{% include "/cpp/class/write_to.twig" %}
}

void {{ name }}::ReadFrom(bufobjects::BufferObjectBuilder& _bob) {
{% include "/cpp/class/read_from.twig" %}
}

void {{ name }}::WriteDirectTo(bufobjects::BufferObjectBuilder& _bob,
{%- for field in fields -%}
  {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}) {
{% include "/cpp/class/write_direct_to.twig" %}
};
void {{ name }}::WriteDirectIdentifiedTo(bufobjects::BufferObjectBuilder& _bob,
{%- for field in fields -%}
  {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}) {
_bob.Write{{ builderTypeNames[bufferObjectIdType] }}(bufobjects::{{ utils.getBufferObjectIdName(definition) }});
{{ name }}::WriteDirectTo(_bob, {%- for field in fields -%}
  {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%});
};

{% if (utils.hasAttribute(definition, "CreateBuilder") == true) %}
  {% include "/cpp/class/builder_source.twig"  %}
{% endif %}

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    }
  {% endif %}
{% endfor %}
