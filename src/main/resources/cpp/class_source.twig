{%- import "/cpp/macros.twig" as macros -%}
{%- import "/cpp/types.twig" as tt -%}

{%- set name = definition.name.simpleName -%}
// Generated with https://github.com/paidgeek/bufobjects

{% set incPath = "" -%}
{%- for p in definition.name.path -%}
  {%- if (loop.index0 != 0) -%}
    {%- set incPath = concat(incPath, "../") -%}
  {%- endif -%}
{%- endfor -%}
#include "{{ utils.toSnakeCase(name) }}.h"

{% set fields = definition.fields %}
{% for p in definition.parentPath -%}
  {% set fields = merge(fields, p.fields) %}
{%- endfor -%}

{%- for field in fields -%}
{%- set type = 0 -%}
{%- if (utils.getClassName(field.type.definition) == "ClassDefinition" or utils.getClassName(field.type.definition) == "InterfaceDefinition") -%}
  {%- set type = field.type -%}
{%- elseif(utils.getClassName(field.type.type.definition) == "ClassDefinition" or utils.getClassName(field.type.type.definition) == "InterfaceDefinition") -%}
  {%- set type = field.type.type -%}
{%- elseif(utils.getClassName(field.type.valueType.definition) == "ClassDefinition" or utils.getClassName(field.type.valueType.definition) == "InterfaceDefinition") -%}
  {%- set type = field.type.valueType -%}
{%- endif -%}
{%- if (type != 0) -%}
{% set path = "" %}
{%- for p in type.definition.name.path -%}
  {%- if (loop.revindex0 != 0) -%}
    {% if (loop.index0 == 0) %}
      {%- set path = concat(path, lower(p)) -%}
    {% else %}
      {%- set path = concat(path, "/", lower(p)) -%}
    {% endif %}
  {%- endif -%}
{%- endfor %}
#include "{{ incPath }}{{ path }}/{{ utils.toSnakeCase(type.definition.name.simpleName) }}.h"
// this comment seems to fix a jtwig bug "{{ type.definition.children }}"
{% if (length(type.definition.getChildren()) != 0) %}
  {%- for childDefinition in type.definition.getChildren() -%}
    {% set path = "" %}
    {%- for p in childDefinition.name.path -%}
      {%- if (loop.revindex0 != 0) -%}
        {% if (loop.index0 == 0) %}
          {%- set path = concat(path, lower(p)) -%}
        {% else %}
          {%- set path = concat(path, "/", lower(p)) -%}
        {% endif %}
      {%- endif -%}
    {%- endfor -%}
#include "{{ incPath }}{{ path }}/{{ utils.toSnakeCase(childDefinition.name.simpleName) }}.h"
  {% endfor -%}
{% endif %}

{% endif -%}
{%- endfor -%}

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    namespace {{ lower(p) }} {
  {% endif %}
{% endfor %}

{{ name }}::{{ name }}() { }

{{ name }}::{{ name }}(
{%- for field in fields -%}
    {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%})
: {%- if (definition.parent is not null) -%}
  {{ trim(macros.getBaseNoPointer(utils, definition.parentDefinition)) }}(
  {%- for field in definition.parentDefinition.fields -%}
    {{ utils.toSnakeCase(field.name) }}
    {%- if (loop.revindex0 != 0) -%}
      ,
    {%- endif -%}
  {%- endfor -%}
  )
  {% if (length(definition.fields) != 0) %}
    ,
  {% endif %}
{%- endif %}
{%- for field in definition.fields -%}
  {{ utils.toSnakeCase(field.name) }}_({{ utils.toSnakeCase(field.name) }})
  {%- if (loop.revindex0 != 0 ) -%}
    ,
  {%- endif -%}
{%- endfor -%}
{}

{{ name }}::~{{ name }}() {
  {% include "/cpp/class/destructor.twig" %}
}

void {{ name }}::Init(
{%- for field in fields -%}
    {%- if (utils.getClassName(field.type.definition) == "ClassDefinition") -%}
     {{ trim(macros.getTypeName(utils, field.type)) }}& {{ utils.toSnakeCase(field.name) }}
    {%- else -%}
     {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
    {%- endif -%}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}) {
{%- for field in fields -%}
  {{ utils.toSnakeCase(field.name) }}_ = {{ utils.toSnakeCase(field.name) }};
{%- endfor -%}
}
{{ name }}::Ptr {{ name }}::New(
{%- for field in fields -%}
  {%- if (utils.getClassName(field.type.definition) == "ClassDefinition") -%}
    {{ trim(macros.getTypeName(utils, field.type)) }}& {{ utils.toSnakeCase(field.name) }}
  {%- else -%}
    {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- endif -%}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}) {
{% if (utils.rawPointers) %}
  return new {{ trim(macros.getBaseNoPointer(utils, definition)) }}{
  {%- for field in fields -%}
     {{ utils.toSnakeCase(field.name) }}
    {%- if (loop.revindex0 != 0) -%}
      ,
    {%- endif -%}
  {%- endfor -%}};
{% else %}
  return std::make_shared< {{ trim(macros.getBaseNoPointer(utils, definition)) }} >(
  {%- for field in fields -%}
      {{ utils.toSnakeCase(field.name) }}
    {%- if (loop.revindex0 != 0) -%}
      ,
    {%- endif -%}
  {%- endfor -%});
{% endif %}
}

{{ name }}::{{ name }}(const {{ name }}& from) {
  from.CopyTo(*this);
}

{{ name }}& {{ name }}::operator=(const {{ name }}& from) {
  from.CopyTo(*this);
  return *this;
}

{{ types[bufferObjectIdType] }} {{ name }}::BufferObjectId() const {
  return bufobjects::{{ trim(macros.getBufferObjectIdName(definition)) }};
}

void {{ name }}::Reset() {
{% if (definition.parent) -%}
  {{ trim(macros.getBaseNoPointer(utils, definition.parentDefinition)) }}::Reset();
{%- endif -%}
{% include "/cpp/class/reset.twig" %}
}

void {{ name }}::CopyTo(bufobjects::BufferObject& _obj) const {
{{ name }}& _dst = static_cast< {{ name }}& >(_obj);
{% include "/cpp/class/copy_to.twig" %}
}

uint32_t {{ name }}::Size() const {
{% include "/cpp/class/size.twig" %}
}

void {{ name }}::WriteTo(bufobjects::BufferObjectBuilder& _bob) const {
uint32_t _needed = this->Size();
if(_bob.GetRemaining() < _needed) {
  _bob.GrowBuffer(_needed);
}
{% include "/cpp/class/write_to.twig" %}
}

void {{ name }}::ReadFrom(bufobjects::BufferObjectBuilder& _bob) {
{% include "/cpp/class/read_from.twig" %}
}

void {{ name }}::WriteDirectTo(bufobjects::BufferObjectBuilder& _bob,
{%- for field in fields -%}
  {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}) {
{% include "/cpp/class/write_direct_to.twig" %}
};
void {{ name }}::WriteDirectIdentifiedTo(bufobjects::BufferObjectBuilder& _bob,
{%- for field in fields -%}
  {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}) {
_bob.Write{{ builderTypeNames[bufferObjectIdType] }}(bufobjects::{{ trim(macros.getBufferObjectIdName(definition)) }});
{{ name }}::WriteDirectTo(_bob, {%- for field in fields -%}
  {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%});
};

{% if (macros.hasAttribute(definition, "CreateBuilder") == true) %}
  {% include "/cpp/class/builder_source.twig"  %}
{% endif %}

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    }
  {% endif %}
{% endfor %}
