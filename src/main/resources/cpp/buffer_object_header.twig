{% import "/cpp/types.twig" as tt %}
{%- import "/cpp/macros.twig" as macros -%}
// Generated with https://github.com/paidgeek/bufobjects

#ifndef BUFOBJECTS_BUFFER_OBJECT_H
#define BUFOBJECTS_BUFFER_OBJECT_H

#include <vector>
#include <map>
#include <array>

namespace bufobjects {

  class BufferBuilder;

  class BufferObject {
  public:
    typedef BufferObject* Ptr;
    BufferObject() {}
    virtual {{ types[bufferObjectIdType] }} BufferObjectId() const = 0;
    virtual void Reset() = 0;
    virtual void CopyTo(BufferObject& dst) const = 0;
    virtual void WriteTo(BufferBuilder& bb) const = 0;
    virtual void ReadFrom(BufferBuilder& bb) = 0;
    virtual uint32_t Size() const = 0;
  };

  {% set enumValues = "" %}
  {% for namespace, definitions in schema -%}
    {%- for definition in definitions -%}
      {%- if(utils.getClassName(definition) == "ClassDefinition") %}
        {% set enumValues = concat(enumValues, utils.getBufferObjectIdName(definition), " = ", ids[definition], ",\n") %}
      {%- endif -%}
    {%- endfor -%}
  {%- endfor %}
  enum BufferObjectIds : {{ types[bufferObjectIdType] }} {
    {{ enumValues | slice(0, length(enumValues) - 2) }}
  };

  void WriteIdentifiedTo(BufferBuilder& bb, BufferObject::Ptr obj);
  BufferObject::Ptr ReadIdentifiedFrom(BufferBuilder& bb);

}

#endif
