{% import "/cpp/types.twig" as tt %}
{%- import "/cpp/macros.twig" as macros -%}
// Generated with https://github.com/paidgeek/bufobjects

#ifndef BUFOBJECTS_BUFFER_OBJECT_H
#define BUFOBJECTS_BUFFER_OBJECT_H

#include <memory>
#include "buffer_object_builder.h"
#include "Character.h"

namespace bufobjects {
  class BufferObject {
  public:
    BufferObject() {}
    virtual {{ types[bufferObjectIdType] }} BufferObjectId() const = 0;
    virtual void Reset() = 0;
    virtual void CopyTo(BufferObject* dst) = 0;
    virtual void WriteTo(BufferObjectBuilder& bob) const = 0;
    virtual void ReadFrom(BufferObjectBuilder& bob) = 0;
    uint32_t size() {
      return 0;
    }

    enum : {{ types[bufferObjectIdType] }} {
    {%- for namespace, definitions in schema -%}
    {%- for definition in definitions -%}
      {%- if(utils.getClassName(definition) == "TypeDefinition") %}
      {{ trim(macros.getBufferObjectIdName(definition)) }} = {{ ids[definition] }}
        {%- if (loop.revindex0 != 0) -%}
          ,
        {%- endif -%}
      {%- endif -%}
    {%- endfor -%}
    {%- endfor %}
    };

    void WriteIdentifiedTo(BufferObjectBuilder& bob, const BufferObject& obj) {
      bob.Write{{ builderTypeNames[bufferObjectIdType] }}(obj.BufferObjectId());
      obj.WriteTo(bob);
    }

    std::unique_ptr< BufferObject> ReadIdentifiedFrom(BufferObjectBuilder& bob) {
    {{ types[bufferObjectIdType] }} id = bob.Read{{ builderTypeNames[bufferObjectIdType] }}();
    std::unique_ptr< BufferObject> obj;
    switch(id) {
    {% for namespace, definitions in schema -%}
      {%- for definition in definitions -%}
        {% if(utils.getClassName(definition) == "TypeDefinition") -%}
          {%- set name = definition.name.simpleName -%}
          {%- set camelCase = utils.toCamelCase(name) -%}
          {%- set typeName = trim(macros.getTypeNameForDefinition(definition)) -%}
          case {{ trim(macros.getBufferObjectIdName(definition)) }}:
          obj = std::make_unique<{{ typeName }}>();
          obj.ReadFrom(bob);
          break;
        {% endif -%}
      {%- endfor -%}
    {%- endfor -%}
    }
    return obj;
    }
  }

}
