{% macro getBaseType(type) %}
  {% import "/cpp/types.twig" as tt %}
  {% set className = utils.getClassName(type) %}

  {% if (className == "ArrayType" or className == "ListType") %}
    {% if (type.type.name) %}
      {% set tmp = last(type.type.name.path) %}
      {% for p in reverse(type.type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
      {{ types[type.type.token.toString()] }}
    {% endif %}
  {% else %}
    {% if (type.name) %}
      {% set tmp = last(type.name.path) %}
      {% for p in reverse(type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
      {{ types[type.token.toString()] }}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro getBasePrimitiveType(type) %}
  {% import "/cpp/types.twig" as tt %}
  {% set className = utils.getClassName(type) %}

  {% if (className == "ArrayType" or className == "ListType") %}
    {% if (type.type.name) %}
      {% set tmp = last(type.type.name.path) %}
      {% for p in reverse(type.type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
        {{ types[type.type.token.toString()] }}
    {% endif %}
  {% else %}
    {% if (type.name) %}
      {% set tmp = last(type.name.path) %}
      {% for p in reverse(type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
      {{ types[type.token.toString()] }}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro getTypeName(utils, type) %}
  {% import "/cpp/types.twig" as tt %}
  {% import "/cpp/macros.twig" as macros %}
  {% set className = utils.getClassName(type) %}
  {% if (className == "ArrayType") %}
    std::array<{{ trim(macros.getBasePrimitiveType(type.type)) }}, {{ type.length }}>
  {% elseif (className == "ListType") %}
    std::vector<{{ trim(macros.getBaseType(type.type)) }}>
  {% elseif (utils.getClassName(type.definition) == "EnumDefinition") %}
    {{ types[type.definition.type.toString()] }}
  {% else %}
    {{ trim(macros.getBasePrimitiveType(type)) }}
  {% endif %}
{% endmacro %}

{% macro writePrimary(utils, bufferObjectIdType, type, name) %}
  {% import "/cpp/types.twig" as tt %}
  {% import "/cpp/macros.twig" as macros %}
  {%- set typeName = trim(macros.getTypeName(utils, type)) -%}
  {%- if (utils.getClassName(type.definition) == "EnumDefinition") -%}
    bob.Write{{ builderTypeNames[type.definition.type.toString()] }}({{ name }});
  {%- elseif (type.token.toString() == "IDENTIFIER") -%}
    if({{ name }} == null) {
      bob.WriteUInt8((byte) 0x80);
    } else {
      bob.WriteUInt8((byte) 0x81);
    // this comment seems to fix a jtwig bug {{ type.definition.children }}
    {% if (length(type.definition.getChildren()) != 0) %}
      bob.Write{{ builderTypeNames[bufferObjectIdType] }}({{ name }}.bufferObjectId());
    {% endif %}
      {{ name }}.writeTo(bob);
    }
  {%- else -%}
    bob.Write{{ builderTypeNames[type.token.toString()] }}({{ name }});
  {%- endif -%}
{% endmacro %}

{% macro readPrimary(utils, bufferObjectIdType, type, name, definition) %}
  {% import "/cpp/types.twig" as tt %}
  {% import "/cpp/macros.twig" as macros %}
  {%- set typeName = trim(macros.getTypeName(utils, type)) -%}
  {%- if (utils.getClassName(type.definition) == "EnumDefinition") -%}
    {{ name }} = bob.Read{{ builderTypeNames[type.definition.type.toString()] }}();
  {%- elseif (type.token.toString() == "IDENTIFIER") -%}
    // this comment seems to fix a jtwig bug "{{ type.definition.children }}"
    {% if (length(type.definition.getChildren()) != 0) %}
    if (bob.readUInt8() == (byte) 0x81) {
      {{ types[bufferObjectIdType] }} id = bob.Read{{ builderTypeNames[bufferObjectIdType] }}();
      switch(id) {
      {%- for childDefinition in type.definition.getChildren() -%}
        {%- if(utils.getClassName(childDefinition) == "TypeDefinition") %}
          case {{ trim(macros.getBufferObjectIdName(childDefinition)) }}:
          {{ name }} = new {{ trim(macros.getTypeNameForDefinition(childDefinition)) }}();
          break;
        {%- endif -%}
      {%- endfor -%}
      }
      {{ name }}.ReadFrom(bob);
    } else {
      {{ name }} = null;
    }
    {% else %}
    if (bob.ReadUInt8() == (byte) 0x81) {
      if ({{ name }} == null) {
        {{ name }} = new {{ trim(macros.getTypeNameForDefinition(type.definition)) }}();
      }
      {{ name }}.ReadFrom(bob);
    } else {
      {{ name }} = null;
    }
    {% endif %}
  {%- else -%}
    {{ name }} = bob.Read{{ builderTypeNames[type.token.toString()] }}();
  {%- endif -%}
{% endmacro %}

{% macro getBufferObjectIdName(definition) %}
  {% set name = "" %}
  {% for p in definition.name.path %}
    {% set name = concat(name, p) %}
  {% endfor %}
  k{{ name }}Id
{% endmacro %}

{% macro getTypeNameForDefinition(definition) %}
  {%- set name = definition.name.simpleName -%}
  {%- set pkg = "" -%}
  {%- for p in definition.name.path -%}
    {%- if (loop.revindex0 != 0) -%}
      {%- if (loop.index0 != 0) -%}
        {%- set pkg = concat(pkg, ".", lower(p)) -%}
      {%- else -%}
        {%- set pkg = concat(pkg, lower(p)) -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfor -%}
  {%- set typeName = name -%}
  {%- if (pkg != "") -%}
    {%- set typeName = concat(pkg, ".", name) -%}
  {%- endif -%}
  {{ typeName }}
{% endmacro %}
