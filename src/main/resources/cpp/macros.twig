{% macro getBaseType(utils, type) %}
  {% import "/cpp/types.twig" as tt %}
  {% set className = utils.getClassName(type) %}

  {% if (className == "ArrayType" or className == "VectorType") %}
    {% if (type.type.name) %}
      {% set tmp = last(type.type.name.path) %}
      {% for p in reverse(type.type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), "::", tmp) %}
        {% endif %}
      {% endfor %}
      {% if (utils.getClassName(type.type.definition) == "StructDefinition" or utils.getClassName(type.type.definition) == "EnumDefinition") %}
        {{ tmp }}
      {% else %}
        {% if (utils.rawPointers) %}
          {{ tmp }}*
        {% else %}
          std::shared_ptr<{{ tmp }}>
        {% endif %}
      {% endif %}
    {% else %}
      {{ types[type.type.token.toString()] }}
    {% endif %}
  {% else %}
    {% if (type.name) %}
      {% set tmp = last(type.name.path) %}
      {% for p in reverse(type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), "::", tmp) %}
        {% endif %}
      {% endfor %}
      {% if (utils.getClassName(type.definition) == "StructDefinition" or utils.getClassName(type.definition) == "EnumDefinition") %}
        {{ tmp }}
      {% else %}
        {% if (utils.rawPointers) %}
          {{ tmp }}*
        {% else %}
          std::shared_ptr<{{ tmp }}>
        {% endif %}
      {% endif %}
    {% else %}
      {{ types[type.token.toString()] }}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro getBaseNoPointer(utils, type) %}
  {% import "/cpp/types.twig" as tt %}
  {% set className = utils.getClassName(type) %}

  {% if (className == "ArrayType" or className == "VectorType") %}
    {% if (type.type.name) %}
      {% set tmp = last(type.type.name.path) %}
      {% for p in reverse(type.type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), "::", tmp) %}
        {% endif %}
      {% endfor %}
        {{ tmp }}
    {% else %}
      {{ types[type.type.token.toString()] }}
    {% endif %}
  {% else %}
    {% if (type.name) %}
      {% set tmp = last(type.name.path) %}
      {% for p in reverse(type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), "::", tmp) %}
        {% endif %}
      {% endfor %}
        {{ tmp }}
    {% else %}
      {{ types[type.token.toString()] }}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro getTypeName(utils, type) %}
  {% import "/cpp/types.twig" as tt %}
  {% import "/cpp/macros.twig" as macros %}
  {% set className = utils.getClassName(type) %}
  {% if (className == "ArrayType") %}
    std::array<{{ trim(macros.getBaseType(utils, type.type)) }}, {{ type.length }}>
  {% elseif (className == "VectorType") %}
    std::vector<{{ trim(macros.getBaseType(utils, type.type)) }}>
  {% elseif (className == "MapType") %}
    std::map<{{ trim(macros.getBaseType(utils, type.keyType)) }}, {{ trim(macros.getBaseType(utils, type.valueType)) }}>
  {% else %}
    {{ trim(macros.getBaseType(utils, type)) }}
  {% endif %}
{% endmacro %}

{% macro getTypeNameNoPointer(utils, type) %}
  {% import "/cpp/types.twig" as tt %}
  {% import "/cpp/macros.twig" as macros %}
  {% set className = utils.getClassName(type) %}
  {% if (className == "ArrayType") %}
    std::array<{{ trim(macros.getBaseNoPointer(utils, type.type)) }}, {{ type.length }}>
  {% elseif (className == "VectorType") %}
    std::vector<{{ trim(macros.getBaseNoPointer(utils, type.type)) }}>
  {% elseif (className == "MapType") %}
    std::map<{{ trim(macros.getBaseNoPointer(utils, type.keyType)) }}, {{ trim(macros.getBaseNoPointer(utils, type.valueType)) }}>
  {% else %}
    {{ trim(macros.getBaseNoPointer(utils, type)) }}
  {% endif %}
{% endmacro %}

{% macro writePrimary(utils, bufferObjectIdType, type, name) %}
  {% import "/cpp/types.twig" as tt %}
  {% import "/cpp/macros.twig" as macros %}
  {%- set typeName = trim(macros.getTypeName(utils, type)) -%}
  {%- if (utils.getClassName(type.definition) == "EnumDefinition") -%}
    _bob.Write{{ builderTypeNames[type.definition.type.toString()] }}(static_cast< {{ types[type.definition.type.toString()] }} >({{ name }}));
  {%- elseif (type.token.toString() == "IDENTIFIER") -%}
    {% if (utils.getClassName(type.definition) == "StructDefinition") %}
      {{ name }}.WriteTo(_bob);
    {% else %}
      if({{ name }} == nullptr) {
        _bob.WriteUInt8(0x80);
      } else {
        _bob.WriteUInt8(0x81);
        // this comment seems to fix a jtwig bug "{{ type.definition.children }}"
        {% if (length(type.definition.getChildren()) != 0) %}
          _bob.Write{{ builderTypeNames[bufferObjectIdType] }}({{ name }}->BufferObjectId());
        {% endif %}
        {{ name }}->WriteTo(_bob);
      }
    {% endif %}
  {%- else -%}
    _bob.Write{{ builderTypeNames[type.token.toString()] }}({{ name }});
  {%- endif -%}
{% endmacro %}

{% macro readPrimary(utils, bufferObjectIdType, type, name, definition) %}
  {% import "/cpp/types.twig" as tt %}
  {% import "/cpp/macros.twig" as macros %}
  {%- set typeName = trim(macros.getTypeName(utils, type)) -%}
  {%- if (utils.getClassName(type.definition) == "EnumDefinition") -%}
    {{ name }} = static_cast< {{ trim(macros.getBaseNoPointer(utils, type)) }} >(_bob.Read{{ builderTypeNames[type.definition.type.toString()] }}());
  {%- elseif (type.token.toString() == "IDENTIFIER") -%}
    {% if (utils.getClassName(type.definition) == "StructDefinition") %}
      {{ name }}.ReadFrom(_bob);
    {% else %}
      // this comment seems to fix a jtwig bug "{{ type.definition.children }}"
      {% if (length(type.definition.getChildren()) != 0) %}
        if (_bob.ReadUInt8() == 0x81) {
          {{ types[bufferObjectIdType] }} id = _bob.Read{{ builderTypeNames[bufferObjectIdType] }}();
          switch(id) {
          {%- for childDefinition in type.definition.getChildren() -%}
            {%- if(utils.getClassName(childDefinition) == "ClassDefinition") %}
              case bufobjects::{{ utils.getBufferObjectIdName(childDefinition) }}:
              {% if( utils.rawPointers)  %}
                {{ name }} = new {{ utils.getTypeNameForDefinition(childDefinition) }}{};
                {{ name }}->ReadFrom(_bob);
              {% else %}
                {{ name }} = std::make_shared< {{ utils.getTypeNameForDefinition(childDefinition) }} >();
                {{ name }}->ReadFrom(_bob);
              {% endif %}
              break;
            {%- endif -%}
          {%- endfor -%}
          }
        } else {
          {{ name }} = nullptr;
        }
      {% else %}
        if (_bob.ReadUInt8() == 0x81) {
          if ({{ name }} == nullptr) {
            {% if( utils.rawPointers)  %}
              {{ name }} = new {{ utils.getTypeNameForDefinition(type.definition) }}{};
            {% else %}
              {{ name }} = std::make_shared< {{ utils.getTypeNameForDefinition(type.definition) }} >();
            {% endif %}
          }
          {{ name }}->ReadFrom(_bob);
        } else {
          {{ name }} = nullptr;
        }
      {% endif %}
    {% endif %}
  {%- else -%}
    {{ name }} = _bob.Read{{ builderTypeNames[type.token.toString()] }}();
  {%- endif -%}
{% endmacro %}
