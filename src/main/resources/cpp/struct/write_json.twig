_os << '{';

uint32_t _i = 0;
{% for field in definition.fields %}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}
  {%- set name = utils.toStructField(field.name) -%}
  {%- set fieldName = utils.toSnakeCase(field.name) -%}
  {%- set className = utils.getClassName(field.type) -%}

  _os << "\"" << "{{ fieldName }}" << "\":";
  {%- if (className == "ArrayType" or className == "VectorType") -%}
    _os << '[';
    _i = 0;
    for(const auto& _e : {{ name }}) {
      {{ trim(macros.writeJsonValue(utils, field.type.type, "_e")) }}
      if(++_i < {{ name }}.size()) {
        _os << ',';
      }
    }
    _os << ']';
  {%- elseif (className == "MapType") -%}
    _os << '{';
    _i = 0;
    for(const auto& _kv : {{ name }}) {
      _os << "\"" << _kv.first << "\":";
      {{ trim(macros.writeJsonValue(utils, field.type.valueType, "_kv.second")) }}
      if(++_i < {{ name }}.size()) {
        _os << ',';
      }
    }
    _os << '}';
  {% else %}
    {{ trim(macros.writeJsonValue(utils, field.type, name)) }}
  {% endif %}

  {% if (loop.revindex0 != 0) %}
    _os << ',';
  {% endif %}

{% endfor %}
_os << '}';
