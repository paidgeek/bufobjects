{%- set name = definition.name.simpleName -%}

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    namespace {{ lower(p) }} {
  {% endif %}
{% endfor %}

{{ name }}::{{ name }}() { }

{{ name }}::{{ name }}(
{%- for field in definition.fields -%}
    {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%})
: {%- for field in definition.fields -%}
  {{ utils.toSnakeCase(field.name) }}({{ utils.toSnakeCase(field.name) }})
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}
{}

{{ name }}::{{ name }}(const {{ name }}& from) {
  memcpy(this, &from, sizeof({{ name }}));
}

void {{ name }}::Reset() {
  *this = {{ name }}{};
}

void {{ name }}::WriteTo(bufobjects::BufferBuilder& _bb) const {
if(_bb.GetRemaining() < sizeof({{ name }})) {
  _bb.GrowBuffer(sizeof({{ name }}));
}
{% include "/cpp/struct/write_to.twig" %}
}

void {{ name }}::ReadFrom(bufobjects::BufferBuilder& _bb) {
{% include "/cpp/struct/read_from.twig" %}
}

{% if (utils.hasAttribute(definition, "MakeJson") == true) %}
  void {{ name }}::WriteJsonTo(std::ostream& _out_stream) const {
  {% include "/cpp/struct/write_json_to.twig" %}
  }
{% endif %}

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    }
  {% endif %}
{% endfor %}
