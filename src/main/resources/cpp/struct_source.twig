{%- import "/cpp/macros.twig" as macros -%}
{%- import "/cpp/types.twig" as tt -%}

{%- set name = definition.name.simpleName -%}
// Generated with https://github.com/paidgeek/bufobjects

{% set incPath = "" -%}
{%- for p in definition.name.path -%}
  {%- if (loop.index0 != 0) -%}
    {%- set incPath = concat(incPath, "../") -%}
  {%- endif -%}
{%- endfor -%}
#include "{{ utils.toSnakeCase(name) }}.h"

{%- for field in definition.fields -%}
  {%- set type = 0 -%}
  {%- if (field.type.token.toString() == "IDENTIFIER") -%}
    {%- set type = field.type -%}
  {%- elseif(field.type.type.token.toString() == "IDENTIFIER") -%}
    {%- set type = field.type.type -%}
  {%- endif -%}
  {%- if (type != 0) -%}
    {% set path = "" %}
    {%- for p in type.definition.name.path -%}
      {%- if (loop.revindex0 != 0) -%}
        {% if (loop.index0 == 0) %}
          {%- set path = concat(path, lower(p)) -%}
        {% else %}
          {%- set path = concat(path, "/", lower(p)) -%}
        {% endif %}
      {%- endif -%}
    {%- endfor -%}

    #include "{{ incPath }}{{ path }}/{{ utils.toSnakeCase(type.definition.name.simpleName) }}.h";
  {% endif -%}
{%- endfor -%}

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    namespace {{ lower(p) }} {
  {% endif %}
{% endfor %}

{{ name }}::{{ name }}() { }

{{ name }}::{{ name }}(
{%- for field in definition.fields -%}
    {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%})
: {%- for field in definition.fields -%}
  {{ utils.toSnakeCase(field.name) }}_({{ utils.toSnakeCase(field.name) }})
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}
{}

{{ name }}::{{ name }}(const {{ name }}& from) {
memcpy(this, &from, sizeof({{ name }}));
}

void {{ name }}::Reset() {
  *this = {{ name }}{};
}

void {{ name }}::WriteTo(bufobjects::BufferObjectBuilder& bob) const {
if(bob.GetRemaining() < kSize) {
  bob.GrowBuffer(kSize);
}
{% include "/cpp/struct/write_to.twig" %}
}

void {{ name }}::ReadFrom(bufobjects::BufferObjectBuilder& bob) {
{% include "/cpp/struct/read_from.twig" %}
}

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    }
  {% endif %}
{% endfor %}
