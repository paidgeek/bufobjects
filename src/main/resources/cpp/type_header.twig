{%- import "/cpp/macros.twig" as macros -%}
{%- import "/cpp/types.twig" as tt -%}

{%- set name = definition.name.simpleName -%}
// Generated with https://github.com/paidgeek/bufobjects

{%- set incGuard = "" -%}
{%- for p in definition.name.path -%}
  {%- if (loop.index0 != 0) -%}
    {%- set incGuard = concat(incGuard, "_", upper(p)) -%}
  {%- else %}
    {% set incGuard = concat(incGuard, upper(p)) -%}
  {%- endif -%}
{%- endfor -%}

#ifndef {{ incGuard }}_H
#define {{ incGuard }}_H

{% set incPath = "" -%}
{%- for p in definition.name.path -%}
  {%- if (loop.index0 != 0) -%}
    {%- set incPath = concat(incPath, "../") -%}
  {%- endif -%}
{%- endfor -%}
#include "{{ incPath }}buffer_object.h"

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
      namespace {{ lower(p) }} {
  {% endif %}
{% endfor %}

{% set fields = definition.fields %}
{% for p in definition.parentPath -%}
  {% set fields = merge(fields, p.fields) %}
{%- endfor -%}

class {{ name }}
{% if (definition.parent is not null) -%}
  : public {{ trim(macros.getBaseType(definition.parentDefinition)) }}
{%- else -%}
  : public bufobjects::BufferObject
{%- endif -%}
{

protected:
{% for field in definition.fields %}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}
  {{ typeName }} {{ utils.toSnakeCase(field.name) }}_;
{% endfor %}

public:
{% for field in definition.fields %}
  {%- if (utils.getClassName(field.type) == "ArrayType") %}
    static const uint32_t k{{ field.name }}Length = {{ field.type.length }};
  {% endif -%}
{% endfor %}

{{ name }}();
{{ name }}(
{%- for field in fields -%}
  {{ trim(macros.getTypeName(utils, field.type)) }} {{ utils.toSnakeCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%});
{{ name }}(const {{ name }}& from);
{{ name }}& operator=(const {{ name }}& from);
{{ types[bufferObjectIdType] }} BufferObjectId() const override;
void Reset() override;
void CopyTo(bufobjects::BufferObject& obj) const override;
uint32_t Size() const override;
void WriteTo(bufobjects::BufferObjectBuilder& bob) const override;
void ReadFrom(bufobjects::BufferObjectBuilder& bob) override;

{%- include "/cpp/getset_header.twig" -%}

};

{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    }
  {% endif %}
{% endfor %}

#endif
