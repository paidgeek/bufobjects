{% import "/java/types.twig" as types %}
{%- import "/java/macros.twig" as macros -%}
package {{ lower(topNamespace) }};

// Generated with https://github.com/paidgeek/bufobjects

@SuppressWarnings("all")
public abstract class BufferObject {

  public abstract {{ primitiveTypes[bufferObjectIdType] }} bufferObjectId();
  public abstract void reset();
  public abstract BufferObject copy();
  public abstract void copyTo(BufferObject dst);
  public abstract void writeTo(BufferObjectBuilder bob);
  public abstract void readFrom(BufferObjectBuilder bob);

  public int size() {
    return 0;
  }

{%- for namespace, definitions in schema -%}
  {%- for definition in definitions -%}
    {%- if(utils.getClassName(definition) == "TypeDefinition") %}
      public static final {{ primitiveTypes[bufferObjectIdType] }} {{ trim(macros.getBufferObjectIdName(definition)) }} = {{ ids[definition] }};
    {%- endif -%}
  {%- endfor -%}
{%- endfor %}

  public static void writeIdentifiedTo(BufferObjectBuilder bob, BufferObject obj) {
    bob.write{{ builderTypeNames[bufferObjectIdType] }}(obj.bufferObjectId());
    obj.writeTo(bob);
  }

  public static BufferObject readIdentifiedFrom(BufferObjectBuilder bob) {
    {{ primitiveTypes[bufferObjectIdType] }} id = bob.read{{ builderTypeNames[bufferObjectIdType] }}();
    BufferObject obj = null;
    switch(id) {
    {%- for namespace, definitions in schema -%}
      {%- for definition in definitions -%}
        {% if(utils.getClassName(definition) == "TypeDefinition") -%}
          {%- set name = definition.name.simpleName -%}
          {%- set camelCase = utils.toCamelCase(name) -%}
          {%- set typeName = trim(macros.getTypeNameForDefinition(definition)) -%}
          case {{ trim(macros.getBufferObjectIdName(definition)) }}:
          obj = new {{ typeName }}();
          obj.readFrom(bob);
          break;
        {% endif -%}
      {%- endfor -%}
    {%- endfor -%}
    }
    return obj;
  }

}
