{% macro getBaseType(type, isUI) %}
  {% import "/java/types.twig" as types %}
  {% set className = utils.getClassName(type) %}

  {% if (className == "ArrayType" or className == "VectorType") %}
    {% if (type.type.name) %}
      {% set tmp = last(type.type.name.path) %}
      {% for p in reverse(type.type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
      {% if (type.type.token.toString() == "s" and defined(isUI)) %}
      String
      {% else %}
      {{ classTypes[type.type.token.toString()] }}
      {% endif %}
    {% endif %}
  {% else %}
    {% if (type.name) %}
      {% set tmp = last(type.name.path) %}
      {% for p in reverse(type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
      {% if (type.token.toString() == "s" and defined(isUI)) %}
        String
      {% else %}
        {{ classTypes[type.token.toString()] }}
      {% endif %}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro getBasePrimitiveType(type, isUI) %}
  {% import "/java/types.twig" as types %}
  {% set className = utils.getClassName(type) %}

  {% if (className == "ArrayType" or className == "VectorType") %}
    {% if (type.type.name) %}
      {% set tmp = last(type.type.name.path) %}
      {% for p in reverse(type.type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
      {% if (type.type.token.toString() == "s" and defined(isUI)) %}
        String
      {% else %}
        {{ primitiveTypes[type.type.token.toString()] }}
      {% endif %}
    {% endif %}
  {% else %}
    {% if (type.name) %}
      {% set tmp = last(type.name.path) %}
      {% for p in reverse(type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
      {% if (type.token.toString() == "s" and defined(isUI)) %}
        String
      {% else %}
        {{ primitiveTypes[type.token.toString()] }}
      {% endif %}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro getTypeName(utils, type, isUI) %}
  {% import "/java/types.twig" as types %}
  {% import "/java/macros.twig" as macros %}
  {% set className = utils.getClassName(type) %}
  {% if (className == "ArrayType") %}
    {{ trim(macros.getBasePrimitiveType(type.type, isUI)) }}[]
  {% elseif (className == "VectorType") %}
    java.util.List<{{ trim(macros.getBaseType(type.type, isUI)) }}>
  {% elseif (utils.getClassName(type.definition) == "EnumDefinition") %}
    {{ primitiveTypes[type.definition.type.toString()] }}
  {% else %}
    {{ trim(macros.getBasePrimitiveType(type, isUI)) }}
  {% endif %}
{% endmacro %}

{% macro writePrimary(utils, bufferObjectIdType, type, name) %}
  {% import "/java/types.twig" as types %}
  {% import "/java/macros.twig" as macros %}
  {%- set typeName = trim(macros.getTypeName(utils, type)) -%}
  {%- if (utils.getClassName(type.definition) == "EnumDefinition") -%}
    bob.write{{ builderTypeNames[type.definition.type.toString()] }}({{ name }});
  {%- elseif (type.token.toString() == "IDENTIFIER") -%}
    {%- if (utils.getClassName(type.definition) == "StructDefinition") -%}
      if({{ name }} == null) {
        {{ name }} = new {{ trim(macros.getTypeNameForDefinition(type.definition)) }}();
      }
      {{ name }}.writeTo(bob);
    {%- else -%}
      if({{ name }} == null) {
      bob.writeUInt8((byte) 0x80);
      } else {
      bob.writeUInt8((byte) 0x81);
      // this comment seems to fix a jtwig bug {{ type.definition.children }}
      {% if (length(type.definition.getChildren()) != 0) %}
        bob.write{{ builderTypeNames[bufferObjectIdType] }}({{ name }}.bufferObjectId());
      {% endif %}
      {{ name }}.writeTo(bob);
      }
    {% endif %}
  {%- else -%}
    bob.write{{ builderTypeNames[type.token.toString()] }}({{ name }});
  {%- endif -%}
{% endmacro %}

{% macro readPrimary(utils, bufferObjectIdType, type, name, definition) %}
  {% import "/java/types.twig" as types %}
  {% import "/java/macros.twig" as macros %}
  {%- set typeName = trim(macros.getTypeName(utils, type)) -%}
  {%- if (utils.getClassName(type.definition) == "EnumDefinition") -%}
    {{ name }} = bob.read{{ builderTypeNames[type.definition.type.toString()] }}();
  {%- elseif (type.token.toString() == "IDENTIFIER") -%}
    {%- if (utils.getClassName(type.definition) == "StructDefinition") -%}
      if ({{ name }} == null) {
        {{ name }} = new {{ trim(macros.getTypeNameForDefinition(type.definition)) }}();
      }
      {{ name }}.readFrom(bob);
    {%- else -%}
      // this comment seems to fix a jtwig bug "{{ type.definition.children }}"
      {% if (length(type.definition.getChildren()) != 0) %}
        if (bob.readUInt8() == (byte) 0x81) {
        {{ primitiveTypes[bufferObjectIdType] }} id = bob.read{{ builderTypeNames[bufferObjectIdType] }}();
        switch(id) {
        {%- for childDefinition in type.definition.getChildren() -%}
          {%- if(utils.getClassName(childDefinition) == "ClassDefinition") %}
            case {{ trim(macros.getBufferObjectIdName(childDefinition)) }}:
            {{ name }} = new {{ trim(macros.getTypeNameForDefinition(childDefinition)) }}();
            break;
          {%- endif -%}
        {%- endfor -%}
        }
        {{ name }}.readFrom(bob);
        } else {
        {{ name }} = null;
        }
      {% else %}
        if (bob.readUInt8() == (byte) 0x81) {
        if ({{ name }} == null) {
        {{ name }} = new {{ trim(macros.getTypeNameForDefinition(type.definition)) }}();
        }
        {{ name }}.readFrom(bob);
        } else {
        {{ name }} = null;
        }
      {% endif %}
    {%- endif -%}
  {%- else -%}
    {{ name }} = bob.read{{ builderTypeNames[type.token.toString()] }}();
  {%- endif -%}
{% endmacro %}

{% macro getBufferObjectIdName(definition) %}
  {% set name = "" %}
  {% for p in definition.name.path %}
    {% if (loop.index0 != 0) %}
      {% set name = concat(name, "_", upper(p)) %}
    {% else %}
      {% set name = concat(name, upper(p)) %}
    {% endif %}
  {% endfor %}
  {{ name }}_ID
{% endmacro %}

{% macro getTypeNameForDefinition(definition) %}
  {%- set name = definition.name.simpleName -%}
  {%- set pkg = "" -%}
  {%- for p in definition.name.path -%}
    {%- if (loop.revindex0 != 0) -%}
      {%- if (loop.index0 != 0) -%}
        {%- set pkg = concat(pkg, ".", lower(p)) -%}
      {%- else -%}
        {%- set pkg = concat(pkg, lower(p)) -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfor -%}
  {%- set typeName = name -%}
  {%- if (pkg != "") -%}
    {%- set typeName = concat(pkg, ".", name) -%}
  {%- endif -%}
  {{ typeName }}
{% endmacro %}
