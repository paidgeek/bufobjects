{% macro getBaseType(type) %}
  {% import "/java/types.twig" as types %}
  {% set className = utils.getClassName(type) %}

  {% if (className == "ArrayType" or className == "ListType") %}
    {% if (type.type.name) %}
      {% set tmp = last(type.type.name.path) %}
      {% for p in reverse(type.type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
      {{ classTypes[type.type.token.toString()] }}
    {% endif %}
  {% else %}
    {% if (type.name) %}
      {% set tmp = last(type.name.path) %}
      {% for p in reverse(type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
      {{ classTypes[type.token.toString()] }}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro getBasePrimitiveType(type) %}
  {% import "/java/types.twig" as types %}
  {% set className = utils.getClassName(type) %}

  {% if (className == "ArrayType" or className == "ListType") %}
    {% if (type.type.name) %}
      {% set tmp = last(type.type.name.path) %}
      {% for p in reverse(type.type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
      {{ primitiveTypes[type.type.token.toString()] }}
    {% endif %}
  {% else %}
    {% if (type.name) %}
      {% set tmp = last(type.name.path) %}
      {% for p in reverse(type.name.path) %}
        {% if (loop.index0 != 0) %}
          {% set tmp = concat(lower(p), ".", tmp) %}
        {% endif %}
      {% endfor %}
      {{ tmp }}
    {% else %}
      {{ primitiveTypes[type.token.toString()] }}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro getTypeName(utils, type) %}
  {% import "/java/types.twig" as types %}
  {% import "/java/macros.twig" as macros %}
  {% set className = utils.getClassName(type) %}

  {% if (className == "ArrayType") %}
    {{ trim(macros.getBasePrimitiveType(type.type)) }}[]
  {% elseif (className == "ListType") %}
    java.util.List<{{ trim(macros.getBaseType(type.type)) }}>
  {% elseif (utils.getClassName(type.definition) == "EnumDefinition") %}
    {{ primitiveTypes[type.definition.type.toString()] }}
  {% else %}
    {{ trim(macros.getBasePrimitiveType(type)) }}
  {% endif %}
{% endmacro %}

{% macro writePrimary(utils, type, name) %}
  {% import "/java/types.twig" as types %}
  {% import "/java/macros.twig" as macros %}
  {%- set typeName = trim(macros.getTypeName(utils, type)) -%}
  {%- if (utils.getClassName(type.definition) == "EnumDefinition") -%}
    bob.write{{ builerTypeNames[type.definition.type.toString()] }}({{ name }});
  {%- elseif (type.token.toString() == "IDENTIFIER") -%}
    bob.writeVarUInt32(getBufferObjectId());
    if({{ name }} == null) {
      bob.writeUInt8((byte) 0x80);
    } else {
      bob.writeUInt8((byte) 0x81);
      {{ name }}.writeTo(bob);
    }
  {%- else -%}
    bob.write{{ builerTypeNames[type.token.toString()] }}({{ name }});
  {%- endif -%}
{% endmacro %}

{% macro readPrimary(utils, type, name, definition) %}
  {% import "/java/types.twig" as types %}
  {% import "/java/macros.twig" as macros %}
  {%- set typeName = trim(macros.getTypeName(utils, type)) -%}
  {%- if (utils.getClassName(type.definition) == "EnumDefinition") -%}
    {{ name }} = bob.read{{ builerTypeNames[type.definition.type.toString()] }}();
  {%- elseif (type.token.toString() == "IDENTIFIER") -%}
    int id = bob.readVarUInt32();
    if (bob.readUInt8() == (byte) 0x81) {
      switch(id) {
    {%- for child in type.definition.children -%}
      {%- if(utils.getClassName(child) == "TypeDefinition") %}
        case BufferObjects.{{ trim(macros.getBufferObjectIdName(child)) }}:
          {{ name }} = new {{ trim(macros.getTypeNameForDefinition(child)) }}();
          break;
      {%- endif -%}
    {%- endfor -%}
      }
      {{ name }}.readFrom(bob);
    } else {
      {{ name }} = null;
    }
  {%- else -%}
    {{ name }} = bob.read{{ builerTypeNames[type.token.toString()] }}();
  {%- endif -%}
{% endmacro %}

{% macro getBufferObjectIdName(definition) %}
  {% set name = "" %}
  {% for p in definition.name.path %}
    {% if (loop.index0 != 0) %}
      {% set name = concat(name, "_", upper(p)) %}
    {% else %}
      {% set name = concat(name, upper(p)) %}
    {% endif %}
  {% endfor %}
  {{ name }}_ID
{% endmacro %}

{% macro getTypeNameForDefinition(definition) %}
  {%- set name = definition.name.simpleName -%}
  {%- set pkg = "" -%}
  {%- for p in definition.name.path -%}
    {%- if (loop.revindex0 != 0) -%}
      {%- if (loop.index0 != 0) -%}
        {%- set pkg = concat(pkg, ".", lower(p)) -%}
      {%- else -%}
        {%- set pkg = concat(pkg, lower(p)) -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfor -%}
  {%- set typeName = name -%}
  {%- if (pkg != "") -%}
    {%- set typeName = concat(pkg, ".", name) -%}
  {%- endif -%}
  {{ typeName }}
{% endmacro %}
