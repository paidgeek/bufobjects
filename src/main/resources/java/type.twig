{%- import "/java/macros.twig" as macros -%}
{%- import "/java/types.twig" as types -%}

{%- set name = definition.name.simpleName -%}

{% set pkg = "" %}
{% for p in definition.name.path %}
  {% if (loop.revindex0 != 0) %}
    {% if (loop.index0 != 0) %}
      {% set pkg = concat(pkg, ".", lower(p)) %}
    {% else %}
      {% set pkg = concat(pkg, lower(p)) %}
    {% endif %}
  {% endif %}
{% endfor %}
{% if (pkg != "") %}
  package {{ pkg }};
{% endif %}

// Generated with https://github.com/paidgeek/bufobjects

{% set fields = definition.fields %}
{% for p in definition.parentPath -%}
  {% set fields = merge(fields, p.fields) %}
{%- endfor -%}

import {{ lower(topNamespace) }}.BufferObject;
import {{ lower(topNamespace) }}.BufferObjects;

public class {{ name }}
{% if (definition.parent is not null) -%}
  extends {{ trim(macros.getBaseType(definition.parentDefinition)) }}
{%- else -%}
  extends BufferObject
{%- endif -%}
{

{% set containsStringField = false %}
{% for field in definition.fields %}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}
  protected {{ typeName }} {{ utils.toCamelCase(field.name) }};
  {%- if (utils.getClassName(field.type) == "ArrayType") %}
    public static final int {{ utils.toUpperCase(field.name) }}_LENGTH = {{ field.type.length }};
  {% endif -%}
  {% if (field.type.token.toString() == "s" or field.type.type.token.toString() == "s") %}
    {% set containsStringField = true %}
  {% endif %}
{% endfor %}

{% set parentHasStringField = false %}
{% for p in definition.parentPath %}
  {% for field in p.fields %}
    {% if (field.type.token.toString() == "s" or field.type.type.token.toString() == "s") %}
      {% set parentHasStringField = true %}
    {% endif %}
  {% endfor %}
{% endfor %}
{%- if (containsStringField and not parentHasStringField) -%}
  protected static java.nio.charset.Charset CHARSET_UTF8 = java.nio.charset.Charset.forName("UTF-8");
{%- endif -%}

public {{ name }}() {
  reset();
}

public {{ name }}(
{%- for field in fields -%}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}
  {%- set camelCase = utils.toCamelCase(field.name) -%}
  {{ typeName }} {{ camelCase }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%})
{ {%- for field in fields -%}
  {%- set camelCase = utils.toCamelCase(field.name) -%}
  this.{{ camelCase }} = {{ camelCase }};
{%- endfor -%}
}

public int getBufferObjectId() {
  return {{ bufferObjectId }};
}

public void reset() {
{% if (definition.parent) -%}
  super.reset();
{%- endif -%}
{% include "/java/reset.twig" %}
}

public {{ name }} copy() {
{% include "/java/copy.twig" %}
}

{% include "/java/getset.twig" %}

public int writeTo(byte[] b, int off) {
{% include "/java/write_to.twig" %}
return off;
}

public int readFrom(byte[] b, int off) {
{% include "/java/read_from.twig" %}
return off;
}

public static Builder newBuilder() {
return new Builder();
}

{% include "/java/builder.twig" %}

}
