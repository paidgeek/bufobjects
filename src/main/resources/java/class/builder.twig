{%- import "/java/macros.twig" as macros -%}

{% set fields = definition.fields %}
{% for p in definition.parentPath -%}
  {% set fields = merge(fields, p.fields) %}
{%- endfor -%}

public static class Builder {

{% for field in fields %}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}
  private {{ typeName }} {{ utils.toCamelCase(field.name) }};
{% endfor %}

{% for field in fields %}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}
  {%- set camelCase = utils.toCamelCase(field.name) -%}

  {%- if (utils.getClassName(field.type) == "ArrayType") %}
  public Builder set{{ field.name }}({{ trim(macros.getBasePrimitiveType(field.type.type)) }} ...{{ camelCase }}) {
    if({{ camelCase }}.length == {{ utils.toUpperCase(field.name) }}_LENGTH) {
      this.{{ camelCase }} = {{ camelCase }};
    } else if({{ camelCase }}.length < {{ utils.toUpperCase(field.name) }}_LENGTH) {
      this.{{ camelCase }} = new {{ trim(macros.getBasePrimitiveType(field.type.type)) }}[{{ utils.toUpperCase(field.name) }}_LENGTH];
      System.arraycopy({{ camelCase }}, 0, this.{{ camelCase }}, 0, {{ camelCase }}.length);
    } else {
      throw new IndexOutOfBoundsException();
    }
    return this;
  }
  public Builder set{{ field.name }}(int index, {{ trim(macros.getBasePrimitiveType(field.type.type)) }} value) {
    if(this.{{ camelCase }} == null) {
      this.{{ camelCase }} = new {{ trim(macros.getBasePrimitiveType(field.type.type)) }}[{{ utils.toUpperCase(field.name) }}_LENGTH];
    }
    this.{{ camelCase }}[0] = value;
    return this;
  }
  {% elseif (utils.getClassName(field.type) == "VectorType") %}
  public Builder set{{ field.name }}({{ typeName }} {{ camelCase }}) {
    this.{{ camelCase }} = {{ camelCase }};
    return this;
  }
  public Builder set{{ field.name }}({{ trim(macros.getBaseType(field.type.type)) }} ...{{ camelCase }}) {
    this.{{ camelCase }} = new java.util.ArrayList<{{ trim(macros.getBaseType(field.type.type)) }}>();
    for(int i = 0; i < {{ camelCase }}.length; i++) {
      this.{{ camelCase }}.add({{ camelCase }}[i]);
    }
    return this;
  }
  public Builder set{{ field.name }}(int index, {{ trim(macros.getBaseType(field.type.type)) }} value) {
    if(this.{{ camelCase }} == null) {
      this.{{ camelCase }} = new java.util.ArrayList<{{ trim(macros.getBaseType(field.type.type)) }}>();
    }
    this.{{ camelCase }}.set(0, value);
    return this;
  }
  public Builder add{{ field.name }}({{ trim(macros.getBaseType(field.type.type)) }} ...{{ camelCase }}) {
    if(this.{{ camelCase }} == null) {
      this.{{ camelCase }} = new java.util.ArrayList<{{ trim(macros.getBaseType(field.type.type)) }}>();
      for(int i = 0; i < {{ camelCase }}.length; i++) {
        this.{{ camelCase }}.add({{ camelCase }}[i]);
      }
    } else {
      for(int i = 0; i < {{ camelCase }}.length; i++) {
        this.{{ camelCase }}.add({{ camelCase }}[i]);
      }
    }
    return this;
  }
  public Builder add{{ field.name }}(java.util.List<{{ trim(macros.getBaseType(field.type.type)) }}> {{ camelCase }}) {
    if(this.{{ camelCase }} == null) {
      this.{{ camelCase }} = new java.util.ArrayList<{{ trim(macros.getBaseType(field.type.type)) }}>({{ camelCase }});
    } else {
      this.{{ camelCase }}.addAll(new java.util.ArrayList<{{ trim(macros.getBaseType(field.type.type)) }}>({{ camelCase }}));
    }
    return this;
  }
  {% elseif (utils.getClassName(field.type) == "MapType") %}
  public Builder set{{ field.name }}({{ typeName }} {{ camelCase }}) {
    this.{{ camelCase }} = {{ camelCase }};
    return this;
  }
  public Builder set{{ field.name }}({{ trim(macros.getBaseType(field.type.keyType)) }} key, {{ trim(macros.getBaseType(field.type.valueType)) }} value) {
    if(this.{{ camelCase }} == null) {
      this.{{ camelCase }} = new java.util.HashMap<{{ trim(macros.getBaseType(field.type.keyType)) }}, {{ trim(macros.getBaseType(field.type.valueType)) }}>();
    }
    this.{{ camelCase }}.put(key, value);
    return this;
  }
  {% else %}
  public Builder set{{ field.name }}({{ typeName }} {{ camelCase }}) {
    this.{{ camelCase }} = {{ camelCase }};
    return this;
  }
  {% endif -%}
{% endfor %}

  public {{ name }} build() {
    return new {{ name }}(
{% for field in fields -%}
  this.{{ utils.toCamelCase(field.name) }}
  {%- if (loop.revindex0 != 0) -%}
    ,
  {%- endif -%}
{%- endfor -%}
    );
  }

}
