os.write('{');

{% if (definition.parent is not null) %}
  os.write(BufferBuilder.getStringBytes("\"_id\":"));

  {%- if (bufferObjectIdType == "i16" or bufferObjectIdType == "i32" or bufferObjectIdType == "u16" or bufferObjectIdType == "u32") -%}
    os.write(BufferBuilder.getStringBytes(String.valueOf(this.bufferObjectId())));
  {%- elseif (bufferObjectIdType == "i64" or bufferObjectIdType == "u64") -%}
    os.write(BufferBuilder.getStringBytes("\"" + String.valueOf(this.bufferObjectId()) + "\""));
  {%- elseif (bufferObjectIdType == "i8") -%}
    os.write(BufferBuilder.getStringBytes(String.valueOf(this.bufferObjectId())));
  {%- elseif (bufferObjectIdType == "u8") -%}
    os.write(BufferBuilder.getStringBytes(String.valueOf(this.bufferObjectId())));
  {%- endif -%}
  {% if (length(fields) != 0) %}
    os.write(',');
  {% endif %}
{% endif %}

int i = 0;
final java.math.BigInteger two = java.math.BigInteger.valueOf(2);
{% for field in fields %}
  {%- set typeName = trim(macros.getTypeName(utils, field.type)) -%}
  {%- set name = concat("this.", utils.toCamelCase(field.name)) -%}
  {%- set fieldName = utils.toSnakeCase(field.name) -%}
  {%- set className = utils.getClassName(field.type) -%}

  os.write(BufferBuilder.getStringBytes("\"{{ fieldName }}\":"));
  {%- if (className == "ArrayType") -%}
    {% set elementName = concat(name, "[i]") %}
    if({{ name }} == null) {
      {{ name }} = new {{ primitiveTypes[field.type.type.token.toString()] }}[{{ utils.toUpperCase(field.name) }}_LENGTH];
    }
    os.write('[');
    for(i = 0; i < {{ utils.toUpperCase(field.name) }}_LENGTH; i++) {
      {{ trim(macros.writeJsonValue(utils, field.type.type, elementName)) }}
      if(i < {{ utils.toUpperCase(field.name) }}_LENGTH - 1) {
        os.write(',');
      }
    }
    os.write(']');
  {%- elseif (className == "VectorType") -%}
    os.write('[');
    if({{ name }} != null) {
      int size = {{ name }}.size();
      for(i = 0; i < size; i++) {
        {{ trim(macros.getBasePrimitiveType(field.type.type)) }} e = {{ name }}.get(i);
        {{ trim(macros.writeJsonValue(utils, field.type.type, "e")) }}
        if(i < size - 1) {
          os.write(',');
        }
      }
    }
    os.write(']');
  {%- elseif (className == "MapType") -%}
    os.write('{');
    if({{ name }} != null) {
      int size = {{ name }}.size();
      i = 0;
      {{ trim(macros.getBaseType(field.type.keyType)) }} key;
      {{ trim(macros.getBaseType(field.type.valueType)) }} value;
      for(java.util.Map.Entry<{{ trim(macros.getBaseType(field.type.keyType)) }}, {{ trim(macros.getBaseType(field.type.valueType)) }}> e : {{ name }}.entrySet()) {
        key = e.getKey();
        value = e.getValue();
        {% if (field.type.keyType.token.toString() == "s") %}
        {{ trim(macros.writeJsonValue(utils, field.type.keyType, "key")) }}
        {% else %}
        os.write('"');
        {{ trim(macros.writeJsonValue(utils, field.type.keyType, "key")) }}
        os.write('"');
        {% endif %}
        os.write(':');
        {{ trim(macros.writeJsonValue(utils, field.type.valueType, "value")) }}
        if(++i < size) {
          os.write(',');
        }
      }
    }
    os.write('}');
  {% else %}
    {{ trim(macros.writeJsonValue(utils, field.type, name)) }}
  {% endif %}

  {% if (loop.revindex0 != 0) %}
    os.write(',');
  {% endif %}

{% endfor %}
os.write('}');
